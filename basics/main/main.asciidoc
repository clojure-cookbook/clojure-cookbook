==== Running Clojure Programs

// by John Cromartie (jcromartie)

===== Problem

You want to run a program with a single entry point from Clojure
source code.

===== Solution

Run a file full of Clojure expressions by passing the filename as an
argument to +clojure.main+:

[source,console]
$ java -cp clojure.jar clojure.main my_clojure_program.clj

Load and run the +-main+ function in a namespace with the +-m+/+--main+ option.

[source,console]
$ java -cp clojure.jar:src clojure.main --main my.namespace.core

===== Discussion

Although you will spend most of your time evaluating Clojure code in a
REPL, it is useful to be able to either run a simple "script" full of
Clojure expressions, or to run a more structured Clojure application
with a +-main+ entry point.

In either case, you have access to any extra command line arguments
passed after the script name or the main namespace name.

For example, let's say you have written the following program, in a
file called +hello.clj+.

[source,clojure]
----
(defn greet
  [name]
  (str "Hello, " name "!"))

(doseq [name *command-line-args*]
  (println (greet name)))
----

Invoking this Clojure program directly will yield predictable output.

[source,console]
----
$ java -cp clojure.jar clojure.main hello.clj Alice Bob
Hello, Alice!
Hello, Bob!
$ 
----

This simple script has the side effect of printing output when it is
loaded. Most Clojure code is not organized this way.

As you will typically want to keep your code in well-organized
namespaces, you can provide an entry point through a namespace with a
+-main+ function. This allows you to avoid side effects while loading,
and you can even tweak and invoke your +-main+ function from the REPL
just like any other function during interactive development.

Let's say you've moved the above +greet+ function into a +foo.util+
namespace, and your project is structured something like this:

----
./src/foo/util.clj
./src/foo/core.clj
----

Your +foo.core+ namespace requires the +foo.util+ namespace, and
provides a +-main+ function, like so:

[source,clojure]
----
(ns foo.core
  (:require foo.util))

(defn -main
  [& args]
  (doseq [name args]
    (foo.util/greet name)))
----

When we invoke Clojure with +foo.core+ as the "main" namespace, it
calls the +-main+ function with the provided command line arguments.

[source,console]
----
$ java -cp clojure.jar:src clojure.main --main foo.core Alice Bob
Hello, Alice!
Hello, Bob!
$
----
