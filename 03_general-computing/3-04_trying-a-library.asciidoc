[[sec_try_library]]
=== Trying a Library Without Explicit Dependencies
[role="byline"]
by Mark Whelan

==== Problem

You want to try a library in the REPL without having to modify your
project's dependencies or create a new project.((("REPL (read-eval-print loop)", "loading temporary libraries")))((("development ecosystem", "library access")))(((libraries, loading)))

==== Solution

Use Ryan Neufeld's +lein-try+ to launch the REPL. Library dependencies
will be met automatically.(((lein-try)))

To gain this capability, first make sure you are using Leiningen 2.1.3 or later. Then edit your _~/.lein/profiles.clj_ file, adding `[lein-try "0.4.1"]`
to the +:plugins+ vector of the +:user+ profile:

[source,clojure]
----
{:user {:plugins [[lein-try "0.4.1"]]}}
----

Now you can experience nearly instant gratification with the library
of your choice:

[source,text]
----
$ lein try clj-time
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.pom from clojars
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.jar from clojars
nREPL server started on port 58981 on host 127.0.0.1
REPL-y 0.2.1
Clojure 1.5.1
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)

user=>
----

==== Discussion

Notice that we did not have to give a version number for the library
in the example. +lein-try+ will automatically grab the most recent
released version.

Of course, you can specify a library version if you like. Just add the
version number after the library name:

[source,text]
----
$ lein try clj-time 0.5.1
#...
user=>
----

For a quick view of usage options, invoke *+lein help try+*:

[source,text]
----
$ lein help try
Launch REPL with specified dependencies available.

  Usage:

    lein try [io.rkn/conformity "0.2.1"] [com.datomic/datomic-free "0.8.4020.26"]
    lein try io.rkn/conformity 0.2.1
    lein try io.rkn/conformity # This uses the most recent version

  NOTE: lein-try does not require []

Arguments: ([& args])
----

////
// TODO: Write an emacs plugin that integrates with cider
//
// Let's mention ways to integrate +lein try+ with a couple of other
// popular tools.
//
// ...
////


As befits a Clojure tool, +lein-try+ is an elegant way to make a task
less laborious. Use it to summon powerful libraries from the Net at
your whim, without having to set them up, and enjoy a wizardly
satisfaction from the sudden confluence of new abilities.(((Leiningen plugins, benefits of)))

==== See Also

* The official list of Leiningen http://bit.ly/lein-plugins[plug-ins]
* <<sec_lein_try>>
