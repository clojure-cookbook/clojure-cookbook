=== Playing a Nursery Rhyme
[role="byline"]
by Chris Ford

==== Problem

You want to code a nursery rhyme to inspire your children to take up
programming.(((nursery rhyme example)))(((music)))(((notes)))((("synthesized instruments")))

==== Solution

Use https://github.com/overtone/overtone[Overtone] to bring the song
to life.

Before starting, add `[overtone "0.8.1"]` to your project's
dependencies or start a REPL using +lein-try+:footnote:[There are some
additional installation concerns if you are running Overtone on Linux.
See http://bit.ly/overtone-install[the Overtone wiki] for more
detailed installation instructions.]

[source,text]
----
$ lein try overtone
----

To start, define the melody for an old children's song:

[source,clojure]
----
(require '[overtone.live :as overtone])

(defn note [timing pitch] {:time timing :pitch pitch})

(def melody
  (let [pitches
         [0 0 0 1 2
          ; Row, row, row your boat,
          2 1 2 3 4
          ; Gently down the stream,
          7 7 7 4 4 4 2 2 2 0 0 0
          ; (take 4 (repeat "merrily"))
          4 3 2 1 0]
          ; Life is but a dream!
        durations
         [1 1 2/3 1/3 1
          2/3 1/3 2/3 1/3 2
          1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3
          2/3 1/3 2/3 1/3 2]
        times (reductions + 0 durations)]
      (map note times pitches)))

melody
;; -> ({:time 0, :pitch 0}   ; Row,
;;     {:time 1, :pitch 0}   ; row,
;;     {:time 2, :pitch 0}   ; row
;;     {:time 8/3, :pitch 1} ; your
;;     {:time 3N, :pitch 2}  ; boat
;;     ...)
----

Convert the piece into a specific key by transforming each note's pitch
using a function that represents the key:

[source,clojure]
----
(defn where [k f notes] (map #(update-in % [k] f) notes))

(defn scale [intervals] (fn [degree] (apply + (take degree intervals))))
(def major (scale [2 2 1 2 2 2 1]))

(defn from [n] (partial + n))
(def A (from 69))

(->> melody
  (where :pitch (comp A major)))
;; -> ({:time 0, :pitch 69} ; Row,
;;     {:time 1, :pitch 69} ; row,
;;     ...)
----

Convert the piece into a specific tempo by transforming each note's
time using a function that represents the tempo:

++++
<?hard-pagebreak?>
++++

[source,clojure]
----
(defn bpm [beats] (fn [beat] (/ (* beat 60 1000) beats)))

(->> melody
  (where :time (comp (from (overtone/now)) (bpm 90))))
;; -> ({:time 1383316072169, :pitch 0}
;;     {:time 4149948218507/3, :pitch 0}
;;     ...)

----

Now, define an instrument and use it to play the melody. The following example synthesized instrument is a simple sine wave,
whose amplitude and duration are controlled by an envelope:

[source,clojure]
----
(require '[overtone.live :refer [definst line sin-osc FREE midi->hz at]])

(definst beep [freq 440]
  (let [envelope (line 1 0 0.5 :action FREE)]
    (* envelope (sin-osc freq))))

(defn play [notes]
  (doseq [{ms :time midi :pitch} notes]
    (at ms (beep (midi->hz midi)))))

;; Make sure your speakers are on...
(->> melody
  (where :pitch (comp A major))
  (where :time (comp (from (overtone/now)) (bpm 90)))
  play)
;; -> <music playing on your speakers>
----

If your nursery rhyme is a round, like "Row, Row, Row Your Boat," you
can use it to accompany itself:

[source,clojure]
----
(defn round [beats notes]
  (concat notes (->> notes (where :time (from beats)))))

(->> melody
  (round 4)
  (where :pitch (comp A major))
  (where :time (comp (from (overtone/now)) (bpm 90)))
  play)

----

==== Discussion

A _note_ is a sound of a particular pitch that occurs at a particular
time. A _song_ is a series of notes. We can therefore simply represent
music in Clojure as a sequence of time/pitch pairs.

This representation is structurally very similar to Western music
notation, where each dot on a stave has a time and a pitch determined
by its horizontal and vertical position. But unlike traditional music
notation, the Clojure representation can be manipulated by functional
programming techniques.

Pieces of Western music, like "Row, Row, Row Your Boat," aren't
composed of arbitrary pitches. Within a given melody, the notes are
typically confined to a subset of all possible pitches called a
_scale_.

The approach taken here is to express the pitches by integers
denoting where they appear in the scale, called _degrees_. So, for
example, degree +0+ signifies the first pitch of the scale, and degree
+4+ signifies the fifth pitch of the scale.

This simplifies the description of the melody, because we don't have
to worry about inadvertently specifying pitches that are outside our
chosen scale. It also allows us to vary our chosen scale without
having to rewrite the melody.

To work with degrees, we need a function that translates a degree into
the actual pitch. Since "Row, Row, Row Your Boat" is in a major scale,
we need a function that represents such a scale.

We use the observation that in a major scale, there is a regular
pattern of double and single spaces between adjacent pitches (known to
musicians as tones and semitones). We define a function called
+major+ that accepts a degree and outputs the number of semitones it
represents.

Our pitches still aren't quite right, because they're relative to the
lowest note of the piece. We need to establish a musical reference
point that we will use to interpret our degrees.

Concert A is conventionally used as a reference point by orchestras,
so we'll use it as our musical zero. In other words, we will put "Row, Row, Row Your Boat" into A major. Now a degree of +0+ means A.

Note that we can simply compose together our functions for major and
for A to arrive at a composite A major function.

We need to do a similar transformation for time. Each note's time is
expressed in _beats_, but we need it to be in milliseconds. We use the
current system time as our temporal reference point, meaning that the
piece will start from now (and not the start of the Unix epoch).

"Row, Row, Row Your Boat" is a round, meaning it harmonizes if sung as
an accompaniment to itself, offset by a particular number of beats. As
an extra flourish, we produce a second version of the melody that
starts four beats after the first.

We encourage you to experiment with the tune, perhaps by varying the
speed or using a different key (as a hint, a minor key has the following
pattern of tones and semitones: `[2 1 2 2 1 2 2]`).

We also encourage you to think about how this approach to modeling a
series of events can be applied to other domains. The idea of
expressing a time series as a sequence and then applying
transformations across that series is a simple, flexible, and
composable way of describing a problem.

Music is a wonderful and moving thing. It's also incredibly
well suited to being modeled in a functional programming language. We
hope your children agree.

==== See Also

* https://github.com/overtone/overtone[Overtone], a music environment for Clojure
