[[sec_running_programs]]
=== Running Clojure Programs
[role="byline"]
by John Cromartie

==== Problem

You want to run a program with a single entry point from Clojure
source code.((("development ecosystem", "running from a single entry point")))(((Clojure, clojure.main)))(((functions, main)))

==== Solution

Run a file full of Clojure expressions by passing the filename as an
argument to +clojure.main+.

[NOTE]
====
To follow along with this recipe, you can download a version of
_clojure.jar_ at http://clojure.org/downloads.
====

For example, given a file _my_clojure_program.clj_ with the contents:

[source,clojure]
----
(println "Hi.")
----

invoke the +java+ command with _my_clojure_program.clj_ as the final argument:

[source,text]
----
$ java -cp clojure.jar clojure.main my_clojure_program.clj
Hi.
----

In a more structured project, you'll probably have files organized in a _src/_ folder. For example, given a file _src/com/example/my_program.clj_:

[source,clojure]
----
(ns com.example.my-program)

(defn -main [& args]
  (println "Hey!"))
----

to load and run the +-main+ function, specify the desired namespace
with the +-m+/+--main+ option and add _src_ to the classpath list (via
+-cp+):

[source,text]
----
$ java -cp clojure.jar:src clojure.main --main com.example.my-program
Hey!
----

==== Discussion

Although you will spend most of your time evaluating Clojure code in a
REPL, it is sometimes useful to be able to either run a simple "script" full of
Clojure expressions or run a more structured Clojure application
with a +-main+ entry point.(((scripts)))

In either case, you have access to any extra command-line arguments
passed after the script name or the main namespace name.

For example, let's say you have written the following program, in a
file called _hello.clj_:

[source,clojure]
----
(defn greet
  [name]
  (str "Hello, " name "!"))

(doseq [name *command-line-args*]
  (println (greet name)))
----

Invoking this Clojure program directly will yield predictable output:

[source,text]
----
$ java -cp clojure.jar clojure.main hello.clj Alice Bob
Hello, Alice!
Hello, Bob!
----

This simple script has the side effect of printing output when it is
loaded. Most Clojure code is not organized this way.

As you will typically want to keep your code in well-organized
namespaces, you can provide an entry point through a namespace with a
+-main+ function. This allows you to avoid side effects while loading,
and you can even tweak and invoke your +-main+ function from the REPL
just like any other function during interactive development.(((namespaces, providing entry points through)))

Let's say you've moved your +greet+ function into a +foo.util+
namespace, and your project is structured something like this:

----
./src/foo/util.clj
./src/foo.clj
----

Your +foo+ namespace requires the +foo.util+ namespace and
provides a +-main+ function, like so:

[source,clojure]
----
(ns foo
  (:require foo.util))

(defn -main
  [& args]
  (doseq [name args]
    (println (foo.util/greet name))))
----

When you invoke Clojure with +foo+ as the "main" namespace, it
calls the +-main+ function with the provided command-line arguments:

[source,text]
----
$ java -cp clojure.jar:src clojure.main --main foo Alice Bob
Hello, Alice!
Hello, Bob!
----

You'll also note the addition of +:src+ to the +-cp+ option. This
indicates to Java that the classpath for execution not only includes
_clojure.jar_, but also the contents of the _src/_ directory on disk.

==== See Also

* <<sec_command_line_applications>>, to learn how to run Leiningen projects
  from the command line
* <<sec_parse_command_line_arguments>>, to learn how to cleanly
  expose multiple options and flags in your command-line
  applications
  
++++
<?hard-pagebreak?>
++++
