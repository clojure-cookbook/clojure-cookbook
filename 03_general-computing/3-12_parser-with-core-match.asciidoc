[[sec_core_match_parser]]
=== Making a Parser for Clojure Expressions Using core.match
[role="byline"]
by Chris Frisz

==== Problem

You want to parse Clojure expressions, say, from the input to a macro,
into a different representation (like maps).(((parsing, Clojure expressions)))((("expressions, parsing")))

For this example, consider a heavily simplified version of Clojure
that consists of the following expression types:

  * A variable represented by a valid Clojure symbol
  * An `fn` expression that accepts a single argument and whose body is
    also a valid expression(((fn expressions)))
  * An application of a valid expression in the language to another valid
    expression

You can represent this language by the following grammar:

[source,text]
----
Expr = var
     | (fn [var] Expr)
     | (Expr Expr)
----

==== Solution

Use +core.match+ to pattern match over the input and return the
expression represented as maps of maps.((("Clojure", "clojure.core.match")))(((pattern matching)))

Before starting, add `[org.clojure/core.match "0.2.0"]` to your
project's dependencies, or start a REPL using +lein-try+:

[source,text]
----
$ lein try org.clojure/core.match
----

Now, codify the language's grammar using +clojure.core.match/match+:

[source, clojure]
----
(require '[clojure.core.match :refer (match)])

(defn simple-clojure-parser
  [expr]
  (match [expr]
    [(var :guard symbol?)] {:variable var}
    [(['fn [arg] body] :seq)] {:closure
                               {:arg arg
                                :body (simple-clojure-parser body)}}
    [([operator operand] :seq)] {:application
                                 {:operator (simple-clojure-parser operator)
                                  :operand (simple-clojure-parser operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))

(simple-clojure-parser 'a)
;; -> {:variable a}

(simple-clojure-parser '(fn [x] x))
;; -> {:closure {:arg x, :body {:variable x}}}

(simple-clojure-parser '((fn [x] x) a))
;; -> {:application
;;     {:operator {:closure {:arg x, :body {:variable x}}}
;;      :operand {:variable a}}}

;; fn expression can only have one argument!
(simple-clojure-parser '(fn [x y] x))
;; -> Exception invalid expression: (fn [x y] x) ...
----

==== Discussion

A +match+ statement in +core.match+ is made up of two basic parts. The
first part is a vector of vars to be matched. In our example, this
is `[expr]`. This vector isn't limited to a single entry--it can
contain as many items to match as you would like. The next part is a
variable list of question/answer pairs. A _question_ is a vector
representing the _shape_ the vars vector must take. As with +cond+, an
_answer_ is what will be returned should a var satisfy a question.(((match statements)))

Questions take a variety of forms in +core.match+. Here are explanations
of the preceding samples:

* The first match pattern, `[(var :guard symbol?)]`, matches the
variable case of our syntax, binding the matched expression to +var+.
The special +:guard+ form applies the predicate +symbol?+ to +var+,
only returning the answer if +symbol?+ returns +true+.

* The second pattern, `[(['fn [arg] body] :seq)]`, matches the +fn+ case.footnote:[The match pattern for +fn+ could (and should) include a guard on the +arg+ to ensure that it's a symbol, but that's elided here for brevity.] Note the special `([...] :seq)` syntax for matching
over lists, used here to represent an +fn+ expression. Also notice
that to match on the literal +fn+, it had to be quoted in the match
pattern.  Interestingly, since the +body+ expression should also be
accepted by this parser, it makes a self-recursive call,
+(simple-clojure-parser body)+, in the righthand side of the match
pattern.

* For the third +:application+ pattern, the parser again
matches on a list using the `([...] :seq)` syntax. As in the body of the
+fn+ expression, both the +operator+ and +operand+ expressions should
be accepted by the parser, so it makes a recursive call for each one.
+
Finally, the parser throws an exception if the given expression doesn't
match any of the three accepted patterns. This gives a somewhat more
helpful error message if you accidentally hand the parser a malformed
expression.

Writing your parser this way gives you succinct code that closely
resembles the target input. Alternatively, you could write it
using conditional expressions (+if+ or +cond+) and explicitly
destructure the input. To illustrate the difference in length and
clarity of the code, consider this function that only parses the +fn+
expressions of the Clojure subset:

[source, clojure]
----
(defn parse-fn
  [expr]
  (if (and (list? expr)
           (= (count expr) 3)
           (= (nth expr 0) 'fn)
           (vector? (nth expr 1))
           (= (count (nth expr 1)) 1))
    {:closure {:arg (nth (nth expr 1) 0)
               :body (simple-clojure-parser (nth expr 2))}}
    (throw (Exception. (str "unexpected non-fn expression: " expr)))))
----

Notice how much more code this version needed in order to express the
same properties about an +fn+ expression? Not only did the non-+match+
version require more code, but the +if+ test doesn't resemble the
structure of the expression the way the +match+ pattern does. Further,
+match+ binds the matched input to the variable names in the match
pattern automatically, saving you from having to +let+-bind them
yourself or repeatedly write the same list access code (as shown with
+(nth expr)+ in +parse-fn+ above). Needless to say, the +match+ is
much easier to read and maintain.

==== See Also

* The +core.match+ wiki's
  http://bit.ly/clj-core-match[Overview page] for a
  broader view over all of the library's capabilities
