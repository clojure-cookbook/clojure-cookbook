[[sec_command_line_applications]]
=== Running Programs from the Command Line
[role="byline"]
by Ryan Neufeld

==== Problem

You want to invoke your Clojure application from the command line.((("development ecosystem", "command line invocation")))(((command lines, running programs from)))(((lein run)))(((Leiningen plugins, command-line invocation with)))

==== Solution

In any Leiningen project, use the *+lein run+* command to invoke your
application from the command line. To follow along with this recipe, create a new Leiningen project:

[source,text]
----
$ lein new my-cli
----

Configure which namespace will be the entry point to your application
by adding a +:main+ key to the project's _project.clj_ file:
 
[source,clojure]
----
(defproject my-cli "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.5.1"]]
  :main my-cli.core)
----

Finally, add a +-main+ function to the namespace configured in
_project.clj_:

[source,clojure]
----
(ns my-cli.core)

(defn -main [& args]
  (println "My CLI received arguments:" args))
----

Now, invoke *+lein run+* to run your application:

[source,text]
----
$ lein run
My CLI received arguments: nil

$ lein run 1 :foo "bar"
My CLI received arguments: (1 :foo bar)
----

==== Discussion

As it turns out, invoking your application from the command line
couldn't be easier. Leiningen's +run+ command quickly and easily
connects your application to the command line with little fuss. In its base form, +lein run+ will invoke the +-main+ function of
whatever namespace you have specified as +:main+ in your project's
_project.clj_ file. For example, setting +:main my-cli.core+ will
invoke +my-cli.core/-main+. Alternatively, you may omit implementing
+-main+ and provide +:main+ with the fully qualified name of a
function (e.g., +my-cli.core/alt-main+); this function will be invoked
instead of +-main+.

While the printed arguments in the preceding solution _look_ like Clojure
data, they are in fact regular strings. For simple arguments, you may
choose to parse these strings yourself; otherwise, we suggest using the
https://github.com/clojure/tools.cli[+tools.cli+] library. See
<<sec_parse_command_line_arguments>>, for more information on
+tools.cli+.

Although a project can only have one default +:main+ entry point, you
can invoke other functions from the command line by setting the +-m+
option to a namespace or function. If you set +-m+ to a namespace
(e.g., +my-cli.core+), the +-main+ function of that namespace will be
invoked. If you provide +-m+ with the fully qualified name of a function
(e.g., +my-cli.core/alt-main+), that function will be invoked. There's
no requirement that this function be prefixed with a +-+ (indicating it is
a Java method); it simply must accept a variable number of arguments
(as +-main+ normally does).(((functions, command line invocation of)))

For example, you can add a function +add-main+ to +my-cli.core+:

[source,clojure]
----
(ns my-cli.core)

(defn -main [& args]
  (println "My CLI received arguments:" args))

(defn add-main [& args]
  (->> (map #(Integer/parseInt %) args)
       (reduce + 0)
       (println "The sum is:")))
----

then invoke it from the command line with the command *+lein run -m
my-cli.core/add-main+*:

[source,text]
----
$ lein run -m my-cli.core/add-main 1 2 3
The sum is: 6
----

==== See Also

* <<sec_running_programs>>, to learn how to run plain Clojure files with *+java+*
* <<sec_parse_command_line_arguments>>, to learn how to parse
  command-line arguments using +tools.cli+
* <<sec_packaging_jars>>, to learn how to package an application as an
  executable JAR
* <<sec_daemons>>, to learn how to daemonize applications
