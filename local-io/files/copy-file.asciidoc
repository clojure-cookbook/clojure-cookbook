==== Copy a file

// By Stefan Karlsson (zclj)

===== Problem

You need to copy a file.

===== Solution

Use +clojure.java.io/copy+ to make a copy of a file.

[source,clojure]
----
(clojure.java.io/copy
 (clojure.java.io/file "./file-to-copy.txt")
 (clojure.java.io/file "./my-new-copy.txt"))
;; -> nil
----

If the input file is not found a +java.io.FileNotFoundException+ will be thrown.
[source,clojure]
----
(clojure.java.io/copy
 (clojure.java.io/file "./file-do-not-exist.txt")
 (clojure.java.io/file "./my-new-copy.txt"))
;; -> java.io.FileNotFoundException
----

The input argument to +copy+ can be a string, so if the data you are working with is a string, you can copy that directly to the output file.
[source,clojure]
----
(clojure.java.io/copy "some text" (clojure.java.io/file "./str-test.txt"))
;; -> nil
----

If required, an encoding can be specified by the +:encoding+ option.
[source,clojure]
----
(clojure.java.io/copy "some text" (clojure.java.io/file "./str-test.txt") :encoding "UTF-8")
----

===== Discussion
Note that if the file already exists, it will be overwritten. If that is not what you want, you can put together a "safe" copy function that will catch any exceptions and optionally overwrite.
[source,clojure]
----
(defn safe-copy [source-path destination-path & opts]
  (let [source (clojure.java.io/file source-path)
        destination (clojure.java.io/file destination-path)
        options (merge {:overwrite false} (apply hash-map opts))]
    (if (and (.exists source)
             (or (:overwrite options) (= false (.exists destination))))
      (try
        (= nil (clojure.java.io/copy source destination))
        (catch Exception e (str "exception: " (.getMessage e))))
      false)))

(safe-copy "./file-to-copy.txt" "./my-new-copy.txt")
;; -> true
(safe-copy "./file-to-copy.txt" "./my-new-copy.txt")
;; -> false
(safe-copy "./file-to-copy.txt" "./my-new-copy.txt" :overwrite true)
;; -> true
----
The +safe-copy+ function take the source and destination file path to copy. It also take a number of key/value pairs as options. These options are then merged with the default values. In this example there is only one option, the +:overwrite+ but with this structure for optional arguments you can easily add your own (such as +:encoding+ if needed). After the options have been processed, the function check if the destination file exists, and if so if it should be overwritten. If all is ok it will then perform the +copy+ inside a +try-catch+ body.
Note the equality check against nil for when the file is copied. If you add this you will always get a boolean value from the function. This makes the function more convenient to use, since you can then conditionally check if the operation succeed or not.

You can also use +clojure.java.io/copy+ with a +java.io.Reader+ and a +java.io.Writer+ as well as with streams.

The same efficiency considerations that apply to reading and writing to a file in regards to selecting input and output sources from +File+, +Reader+, +Writer+ or streams should be applied to +copy+. See "Reading and writing files" for more information.

The default buffer size used by copy is 1024. This can be changed with the +:buffer-size+ option.
