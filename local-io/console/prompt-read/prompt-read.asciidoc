=== Prompt Read

// By Rohit Sachdeva (rsachdeva)

===== Problem

You need your program to prompt for user input as the program runs, act based on the data entered and accumulate inputs as you go. Lets take todo tasks example. You ask user for n number of tasks and for each todo task you ask code, description,days allowed to complete. The end result is all tasks data accumulated.

===== Solution

Use +clojure.java.io/read-line+ to read user input with +clojure.core/doall+ and +clojure.core/repeatedly+ to accumulate input data for each task. 

[source,clojure]
----
(defn todo-prompt [question]
  (println question)
  (read-line))

(defn todo-task-details []
  (let [task-code (todo-prompt "Task code?")
        task-description (todo-prompt "Task description?")
        task-days-given-to-complete (todo-prompt "Task days given to complete?")]
    {task-code {"task-description" task-description
                "task-days-given-to-complete" task-days-given-to-complete} }))

(defn accumulate-all-tasks-from-prompt []
  (doall (repeatedly (. Integer parseInt  (todo-prompt "Number of tasks?")) todo-task-details)))
----

===== Discussion

Here is an example output from this to better understand what we are trying to accomplish:

user> (accumulate-all-tasks-from-prompt)

Number of tasks?
3
Task code?
1
Task description?
start a new project on iOS
Task days given to complete?
27
Task code?
2
Task description?
start a new project in Ruby
Task days given to complete?
20
Task code?
3
Task description?
start a new project in Clojure
Task days given to complete?
14
({"1" {"task-description" "start a new project on iOS", "task-days-given-to-complete" "27"}} {"2" {"task-description" "start a new project in Ruby", "task-days-given-to-complete" "20"}} {"3" {"task-description" "start a new project in Clojure", "task-days-given-to-complete" "14"}})


Now lets see the core methods:

[source,clojure]
----
(defn todo-prompt [question]
  (println question)
  (read-line))
----

The println function is just print the question we are asking the user.
The read-line takes the input stream data entered and this is the return value of the function todo-prompt.

Next, lets examine this:

[source,clojure]
----
(. Integer parseInt  (todo-prompt "Number of tasks?"))
---

The value returned from the prompt function is a string, hence we convert to Integer for repeatedly in
accumulate-all-tasks-from-prompt function.


Finally hence we get

[source,clojure]
-----
(defn accumulate-all-tasks-from-prompt []
  (doall (repeatedly 3 todo-task-details)))
-----

The doall is used since we want to run the side effect of inputting user data on a lazy-seq that is otherwise produced using repeatedly. Try removing doall and see the effect. The prompt questions will not appear in line.



