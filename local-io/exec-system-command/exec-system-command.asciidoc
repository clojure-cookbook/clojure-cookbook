=== Executing a System Command

// By Mark Whelan (mrwhelan)

===== Problem

You want to send a command to the underlying operating system
and get its output.

===== Solution

Use +clojure.java.shell/sh+ to run a command on your local system.
It will return a map containing the command's output, any error, and the
exit status, available via the :out, :err, and :exit keys respectively.

[source,clojure]
----
(use '[clojure.java.shell :only [sh]])
(sh "date")
;; -> {:exit 0, :out "Sun Aug 18 09:35:56 EDT 2013\n", :err ""}
----

If your command requires options or arguments, simply add them to the
+sh+ argument list as strings:

[source,clojure]
----
(sh "ls" "-l" "/etc/passwd")
;; -> {:exit 0, :out "-rw-r--r--  1 root  wheel  4962 May 27 07:54 /etc/passwd\n", :err ""}
(sh "ls" "-l" "nosuchfile")
;; -> {:exit 1, :out "", :err "ls: nosuchfile: No such file or directory\n"}
----

===== Discussion

If you're at the REPL, newline characters will be shown instead of
actual linebreaks. To see human-friendly output instead, wrap the
+sh+ command with a +println+. Here's the canonical cowsay example for +sh+,
in which we print only nicely formatted output:

[source,clojure]
----
(println (:out (sh "cowsay" "hello!")))
 ________
< hello! >
 --------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

;; -> nil
----

Sometimes you may want your command to be executed in a directory
other than the current one for your process. Use the :dir
option. If you want to perform multiple operations in the same directory,
you can wrap them using +with-sh-dir+.

[source,clojure]
----
(use 'clojure.java.shell)
;; -> nil
(sh "ls" :dir "/Users")
;; -> {:exit 0, :out "Guest\nShared\ndale\ntucker\n", :err ""}
(with-sh-dir "/Users/tucker"
  (sh "do-backup.sh")
  (sh "du" "-sh" "."))
;; -> {:exit 0, :out " 11G\t.\n", :err ""}
----

Similarly, you can override enviroment variables for +sh+ with
the :env option and a map, or use +with-sh-env+ and a map to wrap a command
or group of commands.

[source,clojure]
----
(use 'clojure.java.shell)
;; -> nil
(sh "printenv" "HOME")
;; -> {:exit 0, :out "/Users/tucker\n", :err ""}
(sh "printenv" "HOME" :env {"HOME" "/Users/dale"})
;; -> {:exit 0, :out "/Users/dale\n", :err ""}
(with-sh-env {"HOME" "/Users/dale"} (sh "printenv" "HOME"))
;; -> {:exit 0, :out "/Users/dale\n", :err ""}
----

[NOTE]
If your program hangs after it does its work, be aware that +sh+ is implemented using +future+. A +future+ will launch a separate thread which, even after realization, will linger in the JVM for about 60 seconds.

[source,clojure]
----
;; I hang for about a minute after printing.
(require '[clojure.java.shell :as shell])
(println (shell/sh "uptime"))
----

The fix is simple; add +(shutdown-agents)+ or +(System/exit <exit-status>)+ to your program. Either will effectively cause it to shut down without the wait.

[source,clojure]
----
;; I exit quickly after printing.
(require '[clojure.java.shell :as shell])
(println (shell/sh "uptime"))
(System/exit 0)
----

Clojure provides great power with its inherent capabilities and its control
over Java. Add the +sh+ command to your repertoire, and you can rule
the entire kingdom of your system from Clojure, firing off programs
written in any language.

To rule the world outside your system as well, see the chapter on
Network IO & Web Services.

===== See Also

* +clojure.core/future+
* SSH (xref)
* See Anthony Grimes's interface to Java process APIs at https://github.com/Raynes/conch[Raynes/conch] for another approach to shelling out in Clojure.
