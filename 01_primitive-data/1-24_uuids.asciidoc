[[sec_primitives_math_uuids]]
=== Generating Unique IDs
[role="byline"]
by Ryan Neufeld

==== Problem

You need to generate a unique ID.(((numeric types, unique ID generation)))((("universally unique ID (UUID)")))(((ID numbers)))
((("functions", "java.util.UUID/randomUUID")))

==== Solution

Use Java's +java.util.UUID/randomUUID+ to generate a universally
unique ID (UUID):

[source,clojure]
----
(java.util.UUID/randomUUID)
;; -> #uuid "5358e6e3-7f81-40f0-84e5-750e29e6ee05"

(java.util.UUID/randomUUID)
;; -> #uuid "a6f92a6f-f736-468f-9e26-f392852825f4"
----

==== Discussion

Oftentimes when building systems, you want to assign unique IDs to
objects and records. IDs are usually simple integers that
monotonically increase with time. This isn't without its problems,
though.

You can't mingle IDs of objects from different origins; and
worse, they reveal information about the amount and input volume of
your data.

This is where UUIDs come in. UUIDs, or universally unique identifiers, are
128-bit random numbers almost certainly unique across the entire
universe. A bold claim, of course--see
http://bit.ly/rfc4122[RFC 4122] for more detailed
information on UUIDs, how they're generated, and the math behind them.

You may have noticed Clojure prints UUIDs with a +#uuid+ in front of
them. This is a reader literal tag. It acts as a shortcut for the
Clojure reader to read and initialize UUID objects. Reader literals
are a lot like string or number literals like +"Hi"+ or +42+, but they
can capture more complex data types.

This makes it possible for
formats like https://github.com/edn-format/edn[edn] (extensible data notation) to communicate in
a common lingo about things like UUIDs without resorting to string
interning and accompanying custom parsing logic.

.Sequential IDs
****

One thing you will lose with the move from sequential IDs to UUIDs is(((sequential IDs)))
the implicit sortability of a chronologically increasing number. What
if you could generate UUIDs that were both unique _and_ sortable?
Datomic does something similar with its +datomic.api/squuid+ function.(((Datomic database, UUID generation)))((("functions", "datomic.api/squuid")))

[source,clojure]
----
(defn squuid []
  (let [uuid (java.util.UUID/randomUUID)
        time (System/currentTimeMillis)
        secs (quot time 1000)
        lsb (.getLeastSignificantBits uuid)
        msb (.getMostSignificantBits uuid)
        timed-msb (bit-or (bit-shift-left secs 32)
                          (bit-and 0x00000000ffffffff msb))]
    (java.util.UUID. timed-msb lsb)))
----

This approximation of Datomic's +squuid+ splits and reassembles a(((range="endofrange", startref="ix_PDnumer")))
random UUID, using +bit-or+ to merge the current time with the most
significant 32 bits of the UUID. The two halves of the UUID
are then reassembled using the +java.util.UUID.+ constructor,
yielding UUIDs that increase sequentially over time:

[source,clojure]
----
(def first (squuid))
first
;; -> #uuid "527bf210-dfae-4c73-8b7a-302d3b511f41"

(def second (squuid))
second
;; -> #uuid "527bf219-65f0-4241-a165-c5c541cb98ea"

(def third (squuid))
third
;; -> #uuid "527bf232-42b2-44bc-8dd7-ddae2abfcb87"

(sort [first second third])
;; -> (#uuid "527bf210-dfae-4c73-8b7a-302d3b511f41"
;;     #uuid "527bf219-65f0-4241-a165-c5c541cb98ea"
;;     #uuid "527bf232-42b2-44bc-8dd7-ddae2abfcb87")
----
****

==== See Also

* <<sec_primitives_math_bitwise>>
* <<sec_primitives_dates_reader_literal>>, for information on +#inst+,
  another example of a reader literal, for dates
* The +java.util.UUID+ http://bit.ly/javadoc-uuid[API documentation]

