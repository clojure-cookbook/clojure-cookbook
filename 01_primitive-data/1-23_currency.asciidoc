=== Working with Currency
[role="byline"]
by Ryan Neufeld

==== Problem

You need to manipulate values that represent currency.(((numeric types, currency)))(((currency)))(((monetary units)))(((values, monetary units)))

==== Solution

Use the https://github.com/clojurewerkz/money[Money] library for
representing, manipulating, and storing values in monetary units.

To follow along with this recipe, add `[clojurewerkz/money "1.4.0"]`
to your project's dependencies, or start a REPL using +lein-try+:

[source,text]
----
$ lein try clojurewerkz/money
----

The +clojurewerkz.money.amounts+ namespace contains functions for
creating, modifying, and comparing units of currency:

[source,clojure]
----
(require '[clojurewerkz.money.amounts    :as ma])
(require '[clojurewerkz.money.currencies :as mc])

;; $2.00 in USD
(def two (ma/amount-of mc/USD 2))
two
;; -> #<Money USD 2.00>


(ma/plus two two)
;; -> #<Money USD 4.00>

(ma/minus two two)
;; -> #<Money USD 0.00>

(ma/< two (ma/amount-of mc/USD 2.01))
;; -> true

(ma/total [two two two two])
;; -> #<Money USD 8.00>
----

==== Discussion

Working with currency is serious business. Never trust built-in(((floating-point values, lack of precision in)))
numerical types with handling currency, especially floating-point
values. These types are simply not meant to capture and manipulate
currency with the semantics and precision required. In particular,
floating-point values of the IEEE 754 standard carry a certain
imprecision by design:

[source,clojure]
----
(- 0.23 0.24)
;; -> -0.009999999999999981
----

You should always use a library custom-tailored for dealing with
money. The Money library wraps the trusted and battle-tested Java
library Joda-Money. Money provides a large amount of functionality
beyond arithmetic, including rounding and currency conversion:

[source,clojure]
----
(ma/round (ma/amount-of mc/USD 3.14) 0 :down)
;; -> #<Money USD 3.00>

(ma/convert-to (ma/amount-of mc/CAD 152.34) mc/USD 1.01696 :down)
;; -> #<Money USD 154.92>
----

The +round+ function takes three arguments: an amount of currency, a(((numeric types, rounding/truncating)))(((rounding up/down)))
scale factor, and a rounding mode. The scaling factor is a somewhat(((scaling factors)))
peculiar argument. It might be familiar to you if you've ever done
scaling with +BigDecimal+, which shares identical factors. A scale of
+-1+ scales to the tens place, +0+ scales to the ones place, and so on and
so forth. Further details can be found in the javadoc for the
http://bit.ly/joda-money-rounded-src[+rounded+]
method of Joda-Money's +Money+ class. The final argument is
a rounding mode, of which there are quite a few. +:ceiling+ and +:floor+ round toward positive or
negative infinity. +:up+ and +:down+ round toward or away from zero.
Finally +:half-up+, +:half-down+, and +:half-even+ round toward the
nearest neighbor, preferring up, down, or the most even neighbor.

+clojurewerkz.money.amounts/convert-to+ is a much less complicated
function. +convert-to+ takes an amount of currency, a target currency, a
conversion factor, and a rounding mode. Money doesn't provide its own
conversion factor, since conversion rates change so often, so you'll need to seek out a reputable source for them. Unfortunately, we can't
help you with this one.

Money also provides support for a number of different persistence and
serialization mediums, including
https://github.com/dakrone/cheshire[Cheshire] for converting to/from
JSON and http://clojuremongodb.info/[Monger] for persisting currency
values to MongoDB.

==== See Also

* <<sec_primitives_math_arbitrary_precision>>, and <<sec_primitives_numbers_truncating_rounding>>
