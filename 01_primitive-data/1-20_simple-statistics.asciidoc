=== Calculating Statistics on Collections of Numbers
[role="byline"]
by Ryan Neufeld and Jean Niklas L'&#8202;orange

==== Problem

You need to calculate simple statistics like mean, median, mode, and standard
deviation on a collection of numbers.(((numeric types, statistical data)))(((mean)))(((median)))(((mode)))(((standard deviation)))
(((statistics)))

==== Solution

Find the _mean_ (average) of a collection by dividing its total by the +count+ of the collection:

[source,clojure]
----
(defn mean [coll]
  (let [sum (apply + coll)
        count (count coll)]
    (if (pos? count)
      (/ sum count)
      0)))

(mean [1 2 3 4])
;; -> 5/2

(mean [1 1.6 7.4 10])
;; -> 5.0

(mean [])
;; -> 0
----

Find the _median_ (middle value) of a collection by sorting its
values and getting its middle value. There are, of course, special
considerations for collections of even length. In these cases, the median is
considering the mean of the _two_ middle values:

[source,clojure]
----
(defn median [coll]
  (let [sorted (sort coll)
        cnt (count sorted)
        halfway (quot cnt 2)]
    (if (odd? cnt)
      (nth sorted halfway) ; <1>
      (let [bottom (dec halfway)
            bottom-val (nth sorted bottom)
            top-val (nth sorted halfway)]
        (mean [bottom-val top-val]))))) ; <2>

(median [5 2 4 1 3])
;; -> 3

(median [7 0 2 3])
;; -> 5/2  ; The average of 2 and 3.
----

<1> In the case that +coll+ has an odd number of items, simply retrieve that item with +nth+.
<2> When +coll+ has an even number of items, find the index for the other central value (+bottom+), and take the mean of the top and bottom values.

Find the _mode_ (most frequently occurring value) of a collection by
using +frequencies+ to tally occurrences. Then massage that tally to
retrieve the discrete list of modes:

[source,clojure]
----
(defn mode [coll]
  (let [freqs (frequencies coll)
        occurrences (group-by second freqs)
        modes (last (sort occurrences))
        modes (->> modes
                   second
                   (map first))]
     modes))

(mode [:alan :bob :alan :greg])
;; -> (:alan)

(mode [:smith :carpenter :doe :smith :doe])
;; -> (:smith :doe)
----

===== Standard deviation

Find the sample _standard deviation_ by completing the following steps:

. For each value in the collection, subtract the +mean+ from the value and multiply that result by itself.
. Then, sum up all those values.
. Divide the result by the number of values _minus one_.
. Finally, take the square root of the previous result:
+
[source,clojure]
----
(defn standard-deviation [coll]
  (let [avg (mean coll)
        squares (for [x coll]
                  (let [x-avg (- x avg)]
                    (* x-avg x-avg)))
        total (count coll)]
    (-> (/ (apply + squares)
           (- total 1))
        (Math/sqrt))))

(standard-deviation [4 5 2 9 5 7 4 5 4])
;; -> 2.0

(standard-deviation [4 5 5 4 4 2 2 6])
;; -> 1.4142135623730951
----

==== Discussion

Both +mean+ and +median+ are fairly easy to reproduce in Clojure, but
+mode+ requires a bit more effort. +mode+ is a little different than
+mean+ or +median+ in that it generally only makes sense for
nonnumeric data. Calculating the modes of a collection is a little
more involved and ultimately requires a good deal of processing
compared to its numeric cousins.

Here is a breakdown of how +mode+ works:

[source,clojure]
----
(defn mode [coll]
  (let [freqs (frequencies coll)            ; <1>
        occurrences (group-by second freqs) ; <2>
        modes (last (sort occurrences))     ; <3>
        modes (->> modes                    ; <4>
                   second
                   (map first))]
     modes))
----

<1> +frequencies+ returns a map that tallies the number of times
    each value in +coll+ occurs. This would be something like +{:a 1 :b 2}+.
<2> +group-by+ with +second+ inverts the +freqs+ map, turning keys
    into values and merging duplicates into groups. This would turn +{:a 1 :b
    1}+ into `{1 [[:a 1] [:b 1]]}`.
<3> The list of occurrences is now sortable. The last pair in the
    sorted list will be the modes, or most frequently occurring values.
<4> The final step is processing the raw mode pairs into discrete
    values. Taking +second+ turns pass:[<literal>[2 [[:alan 2\]\]\]</literal>] into pass:[<literal>[[:alan 2\]\]</literal>], and +(map first)+ turns that into +(:alan)+.

The standard deviation measures how much, on average, the individual values in a
population deviate from the mean: the higher the standard deviation is, the
farther away the individual values will be (on average).
+standard-deviation+ is a bit more mathematical than +mean+, +median+, and
+mode+. Follow along the execution of this function step by step:

[source,clojure]
----
(defn standard-deviation [coll]
  (let [avg (mean coll)                   ; <1>
        squares (for [x coll]             ; <2>
                  (let [x-avg (- x avg)]
                    (* x-avg x-avg)))
        total (count coll)]
    (-> (/ (apply + squares)              ; <3>
           (- total 1))
        (Math/sqrt))))
----

<1> Calculate the mean of the collection.
<2> For each value, calculate the square of the difference between the value
and the mean.
<3> Finally, calculate the _sample_ standard deviation by taking the square root of the sum of squares over population size minus one.

[NOTE]
====
If you have the complete population, you can compute the  _population_
standard deviation by dividing by +total+ instead of +(- total 1)+.
====

==== See Also

* The Wikipedia article on
http://bit.ly/wiki-std-dev[standard deviation] for more
information on standard deviation and what it can be used for
