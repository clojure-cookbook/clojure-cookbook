[[sec_primitives_dates_time_between]]
=== Calculating the Length of a Time Interval
[role="byline"]
by Ryan Neufeld

==== Problem

You need to calculate the difference between two points in time.((("dates/times", "time intervals")))((("time intervals", seealso="dates/times")))

==== Solution

Since Java date and time classes have poor support for time zones and
leap years, use the https://github.com/clj-time/clj-time[+clj-time+]
library for calculating the length of a time interval.(((time zones)))(((leap years)))

Before starting, add `[clj-time "0.6.0"]` to your project's
dependencies or start a REPL using +lein-try+:

[source,text]
----
$ lein try clj-time
----

Use +interval+ along with the numerous +in-<unit>+ helper functions in(((functions, interval)))
the +clj-time.core+ namespace to calculate the difference between
times:

[source,clojure]
----
(require '[clj-time.core :as t])

;; The first step is to capture two dates as an interval
(def since-april-first
  (t/interval (t/date-time 2013 04 01) (t/now)))

;; dt is the interval between April Fools Day, 2013 and today
since-april-first
;; -> #<Interval 2013-04-01T00:00:00.000Z/2013-04-06T20:06:30.507Z>

(t/in-days since-april-first)
;; -> 5

;; Years since the Moon landing
(t/in-years (t/interval (t/date-time 1969 07 20) (t/now)))
;; -> 43

;; Days from Feb. 28 to March 1 in 2012 (a leap year)
(t/in-days (t/interval (t/date-time 2012 02 28)
                       (t/date-time 2012 03 01)))
;; -> 2

;; And in a non-leap year
(t/in-days (t/interval (t/date-time 2013 02 28)
                       (t/date-time 2013 03 01)))
;; -> 1
----

==== Discussion

Calculating the length of an interval is one of the more
complex operations you can perform with times. Time on Earth is
a complex beast, complicated by constructs like leap time and time
zones; https://github.com/clj-time/clj-time[+clj-time+] is the only
library we're aware of that is capable of wrangling this complexity.

The +clj-time.core/interval+ function takes two dates and returns a
representation of that discrete interval of time. From there, the
+clj-time.core+ namespace includes a myriad of +in-<unit>+ functions
that can present that time interval in different units. These helpers
run the gamut in scale from +in-msecs+ to +in-years+, covering nearly
every scale useful for nonspecialized applications.

One area +clj-time+ lacks support is for leap seconds. Joda-Time's
http://bit.ly/joda-time-faq[official FAQ] explains why
the feature is missing. We're not aware of any
Clojure library that _can_ reason about time at this granularity. If this
concerns you, then you're likely one of few people even capable of
doing it right. Good luck to you.(((Joda-Time library)))

==== See Also

* <<sec_primitives_dates_comparing>>

* <<sec_primitives_dates_ranges>>

* <<sec_primitives_dates_relative>>
