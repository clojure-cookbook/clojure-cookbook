////
:Author: Eric Normand
:Email: ericwnormand@gmail.com
////

=== Getting set up with Liberator

===== Problem

You want to build a RESTful web application.

===== Solution

Use https://github.com/clojure-liberator/liberator[Liberator] to
create HTTP-compliant, RESTful web apps.

In your dependencies:

[source, clojure]
----

[compojure "1.0.2"]
[ring/ring-jetty-adapter "1.1.0"]
[liberator "0.9.0"]


----

[source, clojure]
----


(ns liberatortest
  (:require [compojure.core :refer [defroutes ANY]]
            [ring.adapter.jetty :as jetty]
            [liberator.core :refer [defresource]))

;; Resources

(defresource root
   :available-media-types #{"text/plain"})

; Routing
(defroutes main-routes
  (ANY "/" [] root))

; Server
(defn -main []
 (jetty/run-jetty main-routes {:port 3000}))


----

===== Discussion

https://github.com/clojure-liberator/liberator[Liberator] is a library
for developing HTTP-compliant web servers. It handles content
negotiation, status codes, and standard request methods. It decides
what status to respond using a decision tree which follows the HTTP
Spec.

Liberator does not handle routing, so another library needs to be
used. In this recipe, Compojure was used. Since Liberator does a
better job handling the request method (GET, PUT, POST, etc.), you
should use `ANY` in your Compojure routes. You could also use a
different routing library such as
https://github.com/weavejester/clout[Clout],
https://github.com/cgrand/moustache[Moustache], or the
https://github.com/ericnormand/playnice[playnice] router.

The `defresource` form defines a web resource, which is modeled as a
Ring handler. You can therefore pass the resource as the last argument
to Compojure routes.

Liberator resources are set up with sensible defaults. The default for
the available media types is the empty set, so it needs to be set to
something, otherwise Liberator will return a `406 Not Acceptable`
response. In this recipe it is set to respond with `text/plain` as the
MIME type. The default response is "OK", which you will see if you run
the reciped and point a browser at http://localhost:3000.

===== See Also

* <<sec_webapps_ring_introduction>> for information on setting up
  Ring.
* <<sec_webapps_compojure_compojure>> for more information on
  Compojure routes.