=== Serving Static Files with Ring

// by Clinton Dreisbach (cndreisbach)

===== Problem

You want to serve static files through your Ring application.

===== Solution

Use `ring.middleware.file/wrap-file`.

[source,clojure]
----
(require '[ring.middleware.file :refer [wrap-file]])

;; Serve all files from your public directory.
(def app
  (wrap-file handler "/var/webapps/public"))
----

===== Discussion

`wrap-file` wraps another web request handler, so that you will serve a static file if one exists and call the handler if the requested file does not exist.

`wrap-file` is only one way to serve static files. If you only want to serve up a particular file, `ring.util.response/file-response` will return a handler that serves up that file.

[source,clojure]
----
(require '[ring.util.response :refer [file-response]])

;; Serve README.html.
(file-response "README.html")

;; Serve README.html from the public/ directory.
(file-response "README.html" {:root "public"})

;; Serve README.html through a symlink.
(file-response "README.html" {:allow-symlinks? true})
----

Often, you will want to bundle your static files with your application. In that case, it makes more sense to serve files from your classpath rather than from a specific directory. In that case, you want to use `ring.middleware.resource/wrap-resource`.

[source,clojure]
----
(require '[ring.middleware.resource :refer [wrap-resource]])

(def app
  (wrap-resource handler "static"))
----

This will serve all files under a directory called `static` in your classpath. You can put the `static` directory under `resources/` in a Leiningen project and have your static files packaged with JAR files you generate from that project.

===== See Also

* <<sec_webapps_compojure_compojure>>
* <<sec_local_io_get_local_resource>>
