==== Creating a map

===== Problem

You want to create a map data structure, creating an association of
keys to values. Possibly, you also want the map to maintain the sort
order of its keys.

===== Solution

By far, the easiest way to create a map is to use the map literal:
curly braces containing alternating keys and values.

A simple map using keyword keys:

[source,clojure]
----
{:name ""
 :class :barbarian
 :race :half-orc
 :level 20
 :skills [:bashing :hacking :smashing]}
----

Or, a map representing sparse data using integer keys:

[source,clojure]
----
{1 1, 8 64, 2 4, 9 81}
----

In Clojure, commas are treated as whitespace characters, and they can
(and should) be used to demarcate key/value pairs in cases where they
would be difficult to visually distinguish. This has no effect on the
actual map that is created; it is just to make code easier to read.

An empty map can be created simply by a pair of empty braces, +{}+.

Another way to create maps is to use the type-specific map constructor
functions: +array-map+, +hash-map+ or +sorted-map+. These functions
each construct and return a map of the corresponding concrete type,
interpreting the arguments as key/value pairs (or an empty map, if no
arguments are provided.)

[source,clojure]
----
(array-map)
;; -> {}

(sorted-map :key1 "val1" :key2 "val2")
;; -> {:key1 "val1" :key2 "val2"}
----

If a key occurs multiple times in the argument list, the last value
will be that used in the final return map.

If you're using a sorted map, it's also possible to use the
+sorted-map-by+ function to create a sorted map using a custom
comparator function, given as its first argument. Comparator functions
must take two arguments, and should return true if the arguments are
in sorted order (that is, if the first argument should be sorted
before the second argument).

This example builds a comparator function inline using the +count+
function to compare string lengths, and then sorts the keys
accordingly.

[source,clojure]
----
(sorted-map-by #(< (count %1) (count %2))
               "pigs" 14
               "horses" 2
               "elephants" 1
               "manatees" 3)
;; -> {"pigs" 14, "horses" 2, "manatees" 3, "elephants" 1}
----

Note that using +>+ instead of +<+ yields the opposite sort order:

[source,clojure]
----
(sorted-map-by #(> (count %1) (count %2))
               "pigs" 14
               "horses" 2
               "elephants" 1
               "manatees" 3)
;; -> {"elephants" 1, "manatees" 3, "horses" 2, "pigs" 14}
----

===== Discussion

Clojure maps can have one of three distinct concrete implementations.

* Array maps, +clojure.lang.PersistentArrayMap+. These are backed by a
  simple array. These are efficient for very small maps, but not for
  larger sizes.

* Hash maps, +clojure.lang.PersistentHashMap+. These are backed by a
  hash table data structure. Hash tables support near constant-time
  lookup and insertion, but also require a certain amount of overhead
  space, using up slightly more heap space.

* Sorted maps, +clojure.lang.PersistentTreeMap+. These are backed by a
  balanced red-black binary tree. They are more space efficient than
  hash maps, but have slower insertion and access times.

Array maps are the default implementation for small maps (under ten
entries), and hash maps are the default for larger ones. Sorted maps can
only be created by explicitly invoking the +sorted-map+ or
+sorted-map-by+ functions.

Using +assoc+ or +conj+ on a sorted map will always yield another
sorted map. However, +assoc+-ing on to an array map will yield a hash map once it reaches ten entries. The inverse is not true; using
+dissoc+ on a hash map will not yield an array map, even if it becomes
smaller than 10 entries.

===== See also

* Creating a set (x-ref)
