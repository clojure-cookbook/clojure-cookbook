[[sec_composite_creating_sets]]
=== Creating a Set

===== Problem

You want to create an unordered collection of _distinct_ objects,
which can be tested for membership quickly.

===== Solution

Use a set literal to create a set of objects.

[source,clojure]
----
#{:a :b :c}
;; -> #{:a :c :b}

;; duplicate elements in set literals are an error
#{:x :y :z :z :z}
;; throws #<IllegalArgumentException java.lang.IllegalArgumentException: Duplicate key: :z>
----

Use +hash-set+ to create a set from arguments.

[source,clojure]
----
(hash-set :a :b :c)
;; -> #{:a :c :b}

(apply hash-set :a [:b :c])
;; -> #{:a :c :b}
----

Use +set+ to create a set from another collection.

[source,clojure]
----
(set "hello")
;; -> #{\e \h \l \o}
----

Alternatively, use +into+ with a set to create a new set.

[source,clojure]
----
(into #{} [:a :b :c :a])
;; -> #{:a :b :c}

(into #{:a :b} [:b :c :d])
;; -> #{:a :b :c :d}
----

[TIP]
.Set Construction Performance
====
At the time of writing, the +into+ technique is about three times
faster than +set+ for large collections of objects. Use it whenever
you're working with large sets where performance is a concern.

[source,text]
----
user=> (def largeseq (doall (range 1e5)))
#'user/largeseq
user=> (time (dotimes [_ 100] (set largeseq)))
"Elapsed time: 5594.961 msecs"
nil
user=> (time (dotimes [_ 100] (into #{} largeseq)))
"Elapsed time: 1329.66 msecs"
nil
----
====

Create a sorted set with +sorted-set+.

[source,clojure]
----
(sorted-set 99 4 32 7)
;; -> #{4 7 32 99}

(into (sorted-set) "the quick brown fox jumps over the lazy dog")
;; -> #{\space \a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z}
----

===== Discussion

Sets are very useful data structures. They are commonly used when you
have a collection of values but you are only concerned with the
_distinct_ values. Lookup of an element in a set is typically O(1).

The techniques above all construct _hash sets_; sets which are
unordered and use a hash table as their internal representation.

Clojure also supports creating _sorted sets_, which maintain the order
of their elements. Sets created with +sorted-set+ keep their elements
in ascending order using +compare+. This is useful when treating the
set as a seq.

[source,clojure]
----
(def alphabet (into (sorted-set) "qwertyuiopasdfghjklzxcvbnm"))
(last alphabet)
;; -> \z
(second (disj alphabet \b))
;; -> \c
----

WARNING: All of the elements in a sorted set must be comparable
against one another, e.g. you cannot have a sorted set that contains
both strings and numbers. Attempting to add an uncomparable value will
result in a runtime error.

Adding or removing objects in a sorted set will always return another
sorted set.

If the values you want to store don't have a natural sort order (or
you don't want to use their natural ordering), you can specify a
custom comparator using +sorted-set-by+. The comparator used to create
the set is preserved when adding or removing objects.

[source,clojure]
----
(def descending-set (sorted-set-by > 1 2 3))

(into descending-set [-1 4])
;; -> #{4 3 2 1 -1}
----

There are some performance tradeoffs to consider when choosing between
hash sets and sorted sets. Hash sets are based on hash tables, which
offer constant time insert and lookup in most cases. However, they do
require some degree of memory overhead. Sorted sets, based on a
balanced red-black binary tree, are more memory-efficient but slower
for lookup and insertion.

===== See also

* Creating a vector (xref)
* Adding elements to a set (xref)
* Removing elements from a set (xref)
