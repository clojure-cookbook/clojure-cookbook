==== "Adding" an item to a vector

===== Problem

You want to add an item to a vector, yielding a new vector containing
the item.

===== Solution

When used on a vector, the +conj+ function returns a vector with one
or more items appended to the end.

[source,clojure]
----
(conj [1 2 3] 4)
;; -> [1 2 3 4]

(conj [1 2 3] 4 5)
;; -> [1 2 3 4 5]
----

===== Discussion

Vectors do not support adding new items anywhere aside from the end - if
you need to insert an item in the middle, you will have to use a
sequence manipulation function and convert back to a vector (if
necessary) when you're done.

Since vectors are associative (mapping integer indices to values), you can also use the +assoc+ function with an index one
greater than the current length of the vector to append an item.

[source,clojure]
----
(assoc [:a :b :c] 3 :x)
[:a :b :c :x]
----

However, this approach is somewhat more fragile than +conj+. If the
index you provide is too small, you might simply "overwrite" an
earlier value in the vector, and if it's greater than 1 plus the
vector's current length, it will throw an +IndexOutOfBoundsException+.

Still, this technique is worth remembering. If you have code that is
+assoc+-ing to a vector already, you can use this technique to produce new vectors with updated values.
