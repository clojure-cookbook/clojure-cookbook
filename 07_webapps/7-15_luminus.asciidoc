[[sec_webapps__luminus]]
=== Building Applications with Luminus
[role="byline"]
by Dmitri Sotnikov

==== Problem

// RN: The big value proposition here is that Luminus gives a fast path to
// getting a ring/compojure app created and running quickly. Where possible,
// rely on other recipes to explain Luminus-stack tech.

You want to quickly create a typical Ring/Compojure web application structure to
get a fast start on a new web development project.(((web applications, standardized approach to)))((("applications", "standardized approach to", seealso="web applications")))(((Ring library, application structure with Luminus)))(((Compojure library)))

==== Solution

Use the Luminus Leiningen template when creating a new project.

At the command line, type:

[source,text]
----
$ lein new luminus myapp
----

This will create a new Ring/Compojure application with a skeletal
namespace and resource directory structure that is ready to be
packaged as standalone Java Archive (JAR) or Web Archive (WAR) file that can be
deployed on an application server.

You can start the application in development mode by running:

[source,text]
----
$ lein ring server
----

==== Discussion

Luminus doesn't do anything you couldn't do yourself, but provides a
standardized set of libraries and boilerplate for creating common
Ring/Compojure applications.(((directories, structuring with Luminus)))

The template generates a standard directory structure within your
project, defines a main handler for your application, adds +lein-ring+
hooks for it in the _project.clj_ file, provides a default logging
configuration, and sets up the default routes.

When creating the application, you can add functionality by specifying profiles that extend the generated code to include
the relevant stubs. The following are some examples of initializing the
application with default configurations for different databases:

[source,text]
----
$ lein new luminus app1 +h2

# Or, with PostgreSQL:
$ lein new luminus app2 +postgres

# Or ClojureScript!
$ lein new luminus app3 +cljs

# You can also specify multiple profiles simultaneously:
$ lein new luminus app4 +cljs +postgres
----

The resulting application is structured using the following namespaces.

The +<app-name>.handler+ namespace contains +init+ and +destroy+
functions. These will be called when the application is starting up
and shutting down, respectively. It also contains the +app+ handler
function that's used by Ring to initialize the route handlers.

The +<app-name>.routes+ namespace is used to house the core logic of the
application. Here is where you would define the application routes and
their handlers. The +<app-name>.routes.home+ namespace contains the
routes for the default _/_ and _/about_ pages.

The layout for the site is generated by the +render+ function in the
+<app-name>.views.layout+ namespace.  The HTML templates for the pages
can be found under _src/<app-name>/views/templates/_. Luminus uses
https://github.com/yogthos/Selmer[Selmer], introduced in <<sec_webapps_templating_with_selmer>>, as its default templating
engine.

Any miscellaneous helpers will be found under the
+<app_name>.views.util+ namespace.

When a database profile is selected, the +<app_name>.models.db+ and
+<app_name>.models.schema+ namespaces will be created. The +schema+
namespace is reserved for table definitions, while the +db+ namespace
houses the functions dealing with the application model.

The application can be packaged as a standalone JAR file using *+lein ring uberjar+* or as a WAR file using *+lein ring uberwar+*.

==== See Also

* The http://www.luminusweb.net/[Luminus project page]
