[[sec_db_connecting_with_a_connection_pooling]]
=== Connecting to an SQL Database with a Connection Pool
[role="byline"]
by Tom Hicks and Filippo Diotalevi

==== Problem

You would like to connect to an SQL database efficiently using a
connection pool.(((SQL databases, connecting with connection pool)))(((connection pools)))(((pooled data resources)))

==== Solution

Use the BoneCP connection and statement pooling library to wrap your
JDBC-based drivers, creating a pooled data source. The pooled data
source is then usable by the +clojure.java.jdbc+ library, as described
in <<sec_db_connecting_to_a_sql_database>>.(((BoneCP library)))(((PostgreSQL database)))((("Clojure", "clojure.java.jbdc library")))

To follow along with this recipe, you'll need a running SQL database
and an existing table to connect to. We suggest PostgreSQL.footnote:[Mac
users: visit http://postgresapp.com/ to download an
easy-to-install DMG. Everyone else: you'll find a guide for your operating
system on the
http://bit.ly/postgres-install[PostgreSQL
wiki].]

After you have PostgreSQL running (presumably on _localhost:5432_), run the following
command to create a database for this recipe:

[source,shell-session]
----
# On Mac:
$ /Applications/Postgres93.app/Contents/MacOS/bin/createdb cookbook_experiments

# Everyone else:
$ createdb cookbook_experiments
----

Before starting, add the BoneCP dependency (`[com.jolbox/bonecp
"0.8.0.RELEASE"]`), as well as the appropriate JDBC libraries for your
RDBMS, to your project's dependencies. You'll also need a valid SLF4J
logger. Alternatively, you can follow along in a REPL using +lein-try+:

[source,shell-session]
----
$ lein try com.jolbox/bonecp "0.8.0.RELEASE" \
           org.clojure/java.jdbc "0.3.0" \
           java-jdbc/dsl "0.1.0" \
           org.postgresql/postgresql "9.2-1003-jdbc4" \
           org.slf4j/slf4j-nop  # Just do not log anything
----

First, create a database specification containing the parameters for
accessing the database. This includes keys for the initial and maximum
pool sizes, as well as the number of partitions:

[source,clojure]
----
(def db-spec {:classname "org.postgresql.Driver"
              :subprotocol "postgresql"
              :subname "//localhost:5432/cookbook_experiments"
              :init-pool-size 4
              :max-pool-size 20
              :partitions 2})
----

To create a pooled +BoneCPDataSource+ object, define a function (for
convenience) that uses the parameters in the database
specification map:

[source,clojure]
----
(import 'com.jolbox.bonecp.BoneCPDataSource)

(defn pooled-datasource [db-spec]
  (let [{:keys [classname subprotocol subname user password
                init-pool-size max-pool-size idle-time partitions]} db-spec
        min-connections (inc (quot init-pool-size partitions))
        max-connections (inc (quot max-pool-size partitions))
        cpds (doto (BoneCPDataSource.)
                   (.setDriverClass classname)
                   (.setJdbcUrl (str "jdbc:" subprotocol ":" subname))
                   (.setUsername user)
                   (.setPassword password)
                   (.setMinConnectionsPerPartition min-connections)
                   (.setMaxConnectionsPerPartition max-connections)
                   (.setPartitionCount partitions)
                   (.setStatisticsEnabled true)
                   (.setIdleMaxAgeInMinutes (or idle-time 60)))]
       {:datasource cpds}))
----

Use the convenience function to define a pooled data source for connecting to
your database:

[source,clojure]
----
(def pooled-db-spec (pooled-datasource db-spec))

pooled-db-spec
;; -> {:datasource #<BoneCPDataSource ...>}
----

Pass the database specification as the first argument to any
+clojure.java.jdbc+ functions that query or manipulate your database:

[source,clojure]
----
(require '[clojure.java.jdbc :as jdbc]
         '[java-jdbc.ddl :as ddl]
         '[java-jdbc.sql :as sql])

(jdbc/db-do-commands pooled-db-spec false
  (ddl/create-table
    :blog_posts
    [:id :serial "PRIMARY KEY"]
    [:title "varchar(255)" "NOT NULL"]
    [:body :text]))
;; -> (0)

(jdbc/insert! pooled-db-spec
              :blog_posts
              {:title "My first post!" :body "This is going to be good!"})
;; -> ({:body "This is going to be good!", :title "My first post!", :id 1})

(jdbc/query pooled-db-spec
            (sql/select * :blog_posts (sql/where{:title "My first post!"})))
;; -> ({:body "This is going to be good!", :title "My first post!", :id 1})
----

==== Discussion

As shown in the solution, the +clojure.java.jdbc+ library can create database
connections from JDBC data sources, which allows connections to be easily
pooled by the BoneCP or other pooling libraries.(((Java, Java JDBC)))

The BoneCP library wraps existing JDBC classes to allow the creation of
efficient data sources. It can adapt traditional unpooled drivers and
data sources by augmenting them with transparent pooling of +Connection+
and +PreparedStatement+ instances.

While the library offers several ways to create data sources,
most users will find the examples provided here to be the easiest.

BoneCP offers several dozen configuration parameters that control
the operation of the data source and its connections. Luckily, most of these
configuration parameters have built-in defaults. Parameters may be specified
to control such facets as the min, max, and initial pool size; the number of
idle connections; the age of connections; transaction handling; the use of
+PreparedStatement+ pooling; and if, when, and how pooled connections are
tested.

Pooled data resources (threads and database connections) may be released by
calling the +close+ method on the +BoneCPDataSource+ class of the(((exceptions/errors, SQL exceptions)))
library. Attempting to reuse the pooled data source after it is closed will result
in an SQL exception:

[source,clojure]
----
(.close (:datasource pooled-db-spec))
;; -> nil
----

==== See Also

* <<sec_db_connecting_to_a_sql_database>>, to learn about basic database connections with +clojure.java.jdbc+
* <<sec_db_manipulating_a_sql_database>>, to learn about using +clojure.java.jdbc+ to interact with an SQL database
* The BoneCP http://bit.ly/bonecp-doc[documentation] and https://github.com/wwadge/bonecp[GitHub repository]
* The +clojure.java.jdbc+ https://github.com/clojure/java.jdbc[GitHub repository] for more detailed information on the library

++++
<?hard-pagebreak?>
++++
