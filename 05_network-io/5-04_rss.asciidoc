=== Retrieving and Parsing RSS Data
[role="byline"]
by Osbert Feng

==== Problem

You need to parse RSS data.(((networking/web services, RSS data)))((("RSS (Really Simple Syndication) data")))

==== Solution

Use the +feedparser-clj+ library to parse RSS data.(((feedparser-clj library)))

Before starting, add `[org.clojars.scsibug/feedparser-clj "0.4.0"]` to
your project's dependencies, or follow along in a REPL using +lein-try+:

[source,text]
----
$ lein try org.clojars.scsibug/feedparser-clj
----

Invoke +feedparser-clj.core/parse-feed+ with the URI of an RSS feed to
retrieve that feed and parse it into Clojure data:

[source,clojure]
----
(require '[feedparser-clj.core :as rss])

(rss/parse-feed (str "https://github.com/clojure-cookbook/clojure-cookbook/"
                     "commits/master.atom"))
;; -> {:authors [...]
;;     :entries [{:link "LINK" :title "TITLE" :contents "CONTENT"} ...]
;;      ...}
----

You can also invoke +parse-feed+ with a +java.io.InputStream+ to read
from a file or other location:

[source,clojure]
----
(with-open [writer (clojure.java.io/writer "master.atom")]
  (spit writer
        (slurp (str "https://github.com/clojure-cookbook/clojure-cookbook/"
                    "commits/master.atom"))))

(with-open [stream (clojure.java.io/input-stream "master.atom")]
  (rss/parse-feed stream))
;; -> {:authors [...]
;;     :entries [{:link "LINK" :title "TITLE" :contents "CONTENT"} ...]
;;     ...}
----

==== Discussion

+feedparser-clj+ is a wrapper around the Java ROME library that is
capable of processing a variety formats of RSS and Atom feeds.
+feedparser-clj.core/parse-feed+ returns a Clojure map that closely
mimics the underlying XML feed.(((Java, ROME library)))(((ROME library)))

Most of the time, what you care about will be under the +:entries+
key, which contains an array of maps corresponding to each RSS entry.

Some RSS feeds will have +<link rel="next">+ elements that indicate
that the returned list is incomplete and more entries can be retrieved
by following the link. A lazy list of these RSS entries can be
generated:

[source,clojure]
----
(defn next-uri
  "Return the rel=next href in a feed."
  [feed]
  (-> feed
      :entry-links
      (->> (filter #(= (:rel %) "next")))
      first
      :href))


(defn lazy-stream
  "Return a lazy stream of RSS entries."
  [uri]
   (let [raw-response (rss/parse-feed uri)]
      (lazy-cat (:entries raw-response)
         (if-let [nxt (next-uri raw-response)]
            (lazy-stream nxt)))))
----

To verify that lazy loading is happening, logging or tracing can be
added to +lazy-stream+, but it is also easy to confirm that you can
retrieve more entries than are present in a single fetch:

[source,clojure]
----
(def youtube-feed "http://gdata.youtube.com/feeds/api/videos")

(count (rss/parse-feed youtube-feed))
;; -> 15

(count (take 50 (lazy-stream youtube-feed)))
;; -> 50
----

[WARNING]
====
Be careful when evaluating a lazy sequence in a REPL, since it will attempt
to print the entire sequence. Use +take+ to only realize part of
the sequence.
====

==== See Also

* <<sec_read_write_xml>>, for more information on reading and
  writing XML data like RSS feeds
* <<sec_http_request>>
