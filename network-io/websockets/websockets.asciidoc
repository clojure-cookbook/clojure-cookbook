////
:Author: Kevin J. Lynagh
:Email: kevin@keminglabs.com
////


=== Creating a websocket server

===== Problem

You want to use websockets to setup a message-oriented, bidirectional socket between two servers or a server and web browser.

===== Solution

Use https://github.com/lynaghk/jetty7-websockets-async[jetty7-websockets-async].

In your dependencies:

[source,clojure]
----
[com.keminglabs/jetty7-websockets-async "0.1.0-SNAPSHOT"]
----

Here's a websocket handler running side-by-side with a standard Ring HTTP handler

[source,clojure]
----
(require '[com.keminglabs.jetty7-websockets-async.core :refer [configurator]]
         '[clojure.core.async :refer [chan go >! <!]]
         '[ring.adapter.jetty :refer [run-jetty]])

(defn http-handler
  [req]
  {:response 200 :body "HTTP hello" :headers {}})

(def c (chan))

(def ws-configurator
  (configurator c {:path "/"}))

(def server
  (run-jetty http-handler {:configurator ws-configurator
                           :port 8090, :join? false}))

(go (loop []
      (let [ws-req (<! c)]
        (>! (:in ws-req) "Hello new websocket client!")
        (recur))))
----


===== Discussion

As you'd expect from its name, the `jetty7-websockets-async` library allows you to use Jetty 7 to speak websockets---both as a client and as a server.
The API for both cases is symmetric; you create a core.async channel and then register it with a path on a Jetty server or connect it to a remote address (or both!).
Once a connection is established (i.e., a websocket client has connected to your server or *you* have connected to a websocket server), a request map will be provided on the channel, containing the following keys:

    :uri  - the string URI on which the connection was made
    :conn - the underlying Jetty7 websocket connection (see: http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/websocket/WebSocket.Connection.html)
    :in   - a core.async port where you can put string messages
    :out  - a core.async port whence string messages

The in and out channels will be closed when the websocket disconnects.
