=== Running Browser-Based Tests
[role="byline"]
by Matthew Maravillas

==== Problem

You want to run browser-based tests.(((testing, browser-based)))(((Selenium WebDriver)))(((clj-webdriver library)))(((browser-based tests)))

==== Solution

Use Selenium WebDriver via the https://github.com/semperos/clj-webdriver[+clj-webdriver+ library]. This will
allow you to use +clojure.test+ to test your application's behavior in
actual browser environments.

To follow along with this recipe, create a new Leiningen project:

[source,text]
----
$ lein new browser-testing
Generating a project called browser-testing based on the 'default' template.
----

Modify the new project's _project.clj_ file to match the following:

[source,clojure]
----
(defproject browser-testing "0.1.0-SNAPSHOT"
  :profiles {:dev {:dependencies [[clj-webdriver "0.6.0"]]}}
  :test-selectors {:default (complement :browser)
                   :browser :browser})
----

Next, add a simple Selenium test to
_test/browser_testing/core_test.clj_, overwriting its content:

[source,clojure]
----
(ns browser-testing.core-test
  (:require [clojure.test :refer :all]
            [clj-webdriver.taxi :as t]))

;; A simple fixture that sets up a test driver
(defn selenium-fixture
  [& browsers]
  (fn [test]
    (doseq [browser browsers]
      (println (str "\n[ Testing " browser " ]"))
      (t/set-driver! {:browser browser})
      (test)
      (t/quit))))

(use-fixtures :once (selenium-fixture :firefox))

(deftest ^:browser test-clojure
  (t/to "http://clojure.org")

  (is (= (t/title) "Clojure - home"))
  (is (= (t/current-url) "http://example.com/")))

(deftest ^:browser test-clojure-download
  (t/to "http://clojure.org")
  (t/click {:xpath "//div[@class='menu']/*/a[text()='Download']"})

  (is (= (t/title) "Clojure - downloads"))
  (is (= (t/current-url) "http://clojure.org/downloads"))
  (is (re-find #"Rich Hickey" (t/text {:id "foot"}))))
----

[NOTE]
====
A complete version of this repository is available https://github.com/clojure-cookbook/browser-testing[on GitHub]. Check out a copy locally to catch up:

[source,text]
----
$ git clone https://github.com/clojure-cookbook/browser-testing
$ cd browser-testing
----
====

Run the tests on the command line:

[source,text]
----
$ lein test :browser

lein test browser-testing.core-test

[ Testing :firefox ]

lein test :only browser-testing.core-test/test-clojure

FAIL in (test-clojure) (core_test.clj:20)
expected: (= (t/current-url) "http://example.com/")
  actual: (not (= "http://clojure.org/" "http://example.com/"))

Ran 2 tests containing 5 assertions.
1 failures, 0 errors.
Tests failed.
----

==== Discussion

Browser tests verify that your application behaves as expected in your
targeted browsers. They test the appearance and behavior of your
application as rendered in the browser itself.((("web applications", "browser testing for")))

Manually testing applications in a browser is a tedious and repetitive
task. The amount of time and effort required for a complete test run
can be unmanageable for even a moderately sized project. Automating
browser tests ensures they are run consistently and relatively
quickly, resulting in reproducible errors and more frequent test runs.
However, automated tests lack the visual inspection by a human
inherent to manual tests. For example, a manual test could easily
catch a positioning error that an automated test would likely miss if
it were not explicitly tested for.

To write browser tests in Clojure, use the +clj-webdriver+ library with
your preferred test framework, such as +clojure.test+. +clj-webdriver+
provides a clean Clojure interface to Selenium WebDriver, a tool used
to control and automate browser actions.

Some additional configuration may be required to use Selenium
WebDriver or +clj-webdriver+ with your browsers of choice. See the
http://bit.ly/cc-selenium[Selenium WebDriver documentation]
and the http://bit.ly/clj-webdriver-wiki[+clj-webdriver+ wiki].

++++
<?hard-pagebreak?>
++++

Before you dive into testing, you can experiment with +clj-webdriver+ at
a REPL. Start up a REPL with +clj-webdriver+ using +lein-try+:

[source,text]
----
$ lein try clj-webdriver "0.6.0"
----

Use the +clj-webdriver.taxi/set-driver!+ function, selecting the Firefox
WebDriver implementation (other options include +:chrome+ or +:ie+, but these may
require more setup):

[source,clojure]
----
(require '[clj-webdriver.taxi :as t])

(t/set-driver! {:browser :firefox})
;; -> #clj_webdriver.driver.Driver{:webdriver ...}
----

This will open the browser you picked, ready to receive commands. Try a few
functions from the +clj-webdriver.taxi+ namespace:

[source,clojure]
----
(t/to "http://clojure.org/")

(t/current-url)
;; -> "http://clojure.org/"

(t/title)
;; -> "Clojure - home"

(t/click {:xpath "//div[@class='menu']/*/a[text()='Download']"})
(t/current-url)
;; -> "http://clojure.org/downloads"

(t/text {:id "foot"})
;; -> "Copyright 2008-2012 Rich Hickey"
----

When you're finished, close the browser from the REPL:

[source,clojure]
----
(t/quit)
----

Your tests will use these functions to start up and run against the browser. To
save yourself some work, you should set up the browser startup and teardown
using a +clojure.test+ fixture.

+clojure.test/use-fixtures+ allows you to run functions around each individual
test, or once around the namespace's test run as a whole. Use the latter, as
restarting the browser for each test will be far too slow.

The +selenium-fixture+ function uses ++clj-webdriver++'s +set-driver!+ and +quit+
functions to start up a browser for each of the keywords it's provided and run
the namespace's tests inside that browser:

[source,clojure]
----
(defn selenium-fixture
  [& browsers]
  (fn [test]
    (doseq [browser browsers]
      (t/set-driver! {:browser browser})
      (test)
      (t/quit))))

(use-fixtures :once (selenium-fixture :firefox))
----

It's important to note that using a +:once+ fixture means the state of the
browser will persist between tests. Depending on your particular application's
behavior, you may need to guard against this when you write your tests by
beginning from a common browser state for each test. For example, you might
delete all cookies or return to a certain top-level page. If this is necessary,
you may find it useful to write this common reset behavior as an +:each+
fixture.

To begin writing tests, modify your project's _project.clj_ file to include the
+clj-webdriver+ dependency in the +:dev+ profile and +:test-selectors+ for
+:default+ and +browser+ convenience:

[source,clojure]
----
(defproject my-project "1.0.0-SNAPSHOT"
  ;; ...
  :profiles {:dev {:dependencies [[clj-webdriver "0.6.0"]]}}
  :test-selectors {:default (complement :browser)
                   :browser :browser})
----

Test selectors let you run groups of tests independently. This prevents slower
browser tests from impacting the faster, more frequently run unit and lower-level integration tests.

In this case, you've added a new selector and modified the default. The new
+:browser+ selector will only match tests that have been annotated with a
+:browser+ metadata key. The default selector will now exclude any tests with
this annotation.

With the fixture and test selectors in place, you can begin writing your tests.
Start with something simple:

[source,clojure]
----
(deftest ^:browser test-clojure
  (t/to "http://clojure.org/")

  (is (= (t/title) "Clojure - home"))
  (is (= (t/current-url) "http://example.com/")))
----

Note the +^:browser+ metadata attached to the test. This test is annotated as a
browser test, and will only run when that test selector is chosen.

In this test, as in the REPL experiment, you navigate to a URL and check its
title and URL. Run this test at the command line, passing the additional test
selector argument to +lein test+:

++++
<?hard-pagebreak?>
++++

[source,text]
----
$ lein test :browser

lein test browser-testing.core-test

[ Testing :firefox ]

lein test :only browser-testing.core-test/test-clojure

FAIL in (test-clojure) (core_test.clj:20)
expected: (= (t/current-url) "http://example.com/")
  actual: (not (= "http://clojure.org/" "http://example.com/"))

Ran 2 tests containing 5 assertions.
1 failures, 0 errors.
Tests failed.
----

Clearly, this test was bound to fail--replace +http://example.com/+ with
+http://clojure.org/+ and it will pass.

This test is very basic. In most real tests, you'll load a URL, interact with
the page, and verify that the application behaved as expected. Write another
test that interacts with the page:

[source,clojure]
----
(deftest ^:browser test-clojure-download
  (t/to "http://clojure.org")
  (t/click {:xpath "//div[@class='menu']/*/a[text()='Download']"})

  (is (= (t/title) "Clojure - downloads"))
  (is (= (t/current-url) "http://clojure.org/downloads"))
  (is (re-find #"Rich Hickey" (t/text {:id "foot"}))))
----

In this test, after loading the URL, the browser is directed to click on an
anchor located with an XPath selector. To verify that the expected page has
loaded, the test compares the title and URL, as in the first test. Lastly, it
finds the text content of the +#foot+ element containing the copyright and
verifies that the text includes the expected name.

+clj-webdriver+ provides many other capabilities for interacting with your
application. For more information, see the
http://bit.ly/clj-webdriver-wiki[+clj-webdriver+ wiki].

==== See Also

* The +clj-webdriver+ https://github.com/semperos/clj-webdriver[GitHub
  repository] and http://bit.ly/clj-webdriver-wiki[wiki]
* The http://bit.ly/selenium-project[Selenium project page]
* <<sec_unit_testing>>, to learn more about unit testing in Clojure
