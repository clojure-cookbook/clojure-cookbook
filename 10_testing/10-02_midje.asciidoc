[[sec_midje]]
=== Testing with Midje
[role="byline"]
by Joseph Wilk

==== Problem

You want to unit-test a function that integrates with external
dependencies such as HTTP services or databases.(((testing, integrated functions)))(((Midje)))

==== Solution

Use https://github.com/marick/Midje[Midje], a testing framework that
provides ways to mock functions and return fakes.

To follow along with this recipe, start a REPL using +lein-try+:

[source,text]
----
$ lein try midje clj-http
----

Here is an example function that makes an HTTP request:

[source,clojure]

----
;; A function in namespace com.example.core
(require '[clj-http.client :as http])

(defn github-profile [username]
  (let [response (http/get (str "https://api.github.com/users/" username))]
    (when (= (:status response) 200)
      (:body response))))

(github-profile "clojure-cookbook")
;; -> "{\"login\":\"clojure-cookbook\",\"id\":4176246, ...}"
----

To test the +github-profile+ function, define a test using
 +midje.sweet/facts+ and +midje.sweet/fact+ in the corresponding test
 namespace:

[source,clojure]
----
;; In the com.example.core-test namespace...
(require '[midje.sweet :refer :all])

(facts "about successful requests"
  (fact "returns the response body"
    (github-profile "clojure-cookbook") => ..body..
    (provided
      (http/get #"/users/clojure-cookbook") =>
        {:status 200 :body ..body..})))
----

==== Discussion

In Midje, +facts+ associates a description with a group of tests, while
+fact+ maps to your test. Assertions in your +fact+ take the form of:

[source,clojure]
----
;; actual => expected

10 => 10 ; This will pass
10 => 11 ; This will fail
----

Assertions behave a little differently than most testing frameworks.
Within a +fact+ body, every single assertion is checked, irrespective of
whether a previous one failed.(((assertions)))

Midje only provides mocks, not stubs. All functions specified in the
+provided+ body have to be called for the test to pass. Mocks use the
same syntax as assertions, but with a slightly different meaning:

[source,clojure]
----
;; <function call & arguments to match> => <return value of function>

(provided (+ 10 10) => 0)
----

It is important to note you are not calling the `(+ 10 10)` function
here--you are setting up a pattern. Every function call occurring in
the test is checked to see if it matches this pattern. If it does match, Midje will not call the function, but will instead return +0+. When defining mocks with
+provided+, there is a lot of flexibility in terms of how to match mock functions
against real calls. In the preceding solution, for example, regular
expressions are used. This expression instructs Midje to mock calls to
+http/get+ whose URLs end in _/users/clojure-cookbook_:

[source,clojure]
----
;; The expectation 
(http/get #"/users/clojure-cookbook$") 

;; Would match
(http/get "http://localhost:4001/users/clojure-cookbook")
;; or
(http/get "https://api.github.com/users/clojure-cookbook")
----

Midje provides a lot of match-shaping functions that you can use to match
against the arguments of a mock:

[source,clojure]
----
;; Match an argument list that contains 1
(provided
  (http/get (contains [1])) => :result)

;; Match against a custom fn that must return true
(provided
  (http/get (as-checker (fn [x] (x == 10)))) => :result)

;; Match against a single argument of any value
(provided
  (http/get anything) => :result)
----

From within a REPL, you can investigate all of Midje's checkers:

[source,clojure]
----
(require 'midje.repl)
(doc midje-checkers)
;; *out*
;; -------------------------
;; midje.sweet/midje-checkers
;;
;;  (facts "about checkers"
;;    (f) => truthy
;;    (f) => falsey
;;    (f) => irrelevant ; or `anything`
;;    (f) => (exactly odd?) ; when you expect a particular function
;;    (f) => (roughly 10 0.1)
;;    (f) => (throws SomeException #"with message")
;;    (f) => (contains [1 2 3]) ; works with strings, maps, etc.
;;    (f) => (contains [1 2 3] :in-any-order :gaps-ok)
;;    (f) => (just [1 2 3])
;;    (f) => (has every? odd?)
;;    (f) => (nine-of odd?) ; must be exactly 9 odd values.
;;    (f) => (every-checker odd? (roughly 9)) ; both must be true
;;    (f) => (some-checker odd? (roughly 9))) ; one must be true
----

You may have noticed in the solution that we used +..body..+ instead of an
actual response. This is something Midje refers to as a _metaconstant_.

A metaconstant is any name that starts and ends with two dots. It has
no properties other than identity. Think of it as a fake or
placeholder, where we do not care about the actual value or might be
referencing something that does not exist yet. In our example, we don't
really care what +..body..+ is; we just care that it is the thing
returned.(((metaconstants)))

To add Midje to an existing project, add `[midje "1.5.1"]` to your
development dependencies and `[lein-midje "3.1.2"]` to your
development plug-ins. Your _project.clj_ should look something like
this:

[source,clojure]
----
(defproject example "1.0.0-SNAPSHOT"
  :profiles {:dev {:dependencies [[midje "1.5.1"]]
                   :plugins [[lein-midje "3.1.2"]}})
----

Midje provides two ways to run tests: through a REPL, as you may have
been doing, or through Leiningen. Midje actually encourages you to
run all your tests through the REPL, as you develop them. One very useful
way to run your tests is with the +midje.repl/autotest+ function. This
continuously polls the filesystem looking for changes in your project. When it detects these changes, it will automatically rerun the relevant
tests:

[source,clojure]
----
(require '[midje.repl :as midje])

(midje/autotest) ; Start auto-testing

;; Other options are...
(midje/autotest :pause)
(midje/autotest :resume)
(midje/autotest :stop)
----

There are many more things you can do from the REPL with Midje. To
find out more, read the docstring of +midje-repl+ by running *+(doc
midje-repl)+* in a REPL.

You can also run Midje tests through the Leiningen plug-in +lein-midje+
(add as noted in _project.clj_). +lein-midje+ allows you run tests
at a number of granularities--all of your tests, all the tests in a
group, or all the tests in a single namespace:

----
# Run all your tests
$ lein midje

# Run a group of namespaces
$ lein midje com.example.*

# Run a specific namespace
$ lein midje com.example.t-core
----

==== See Also

* <<sec_unit_testing>>, for information on more basic unit testing
  in Clojure
* The Midje https://github.com/marick/Midje[GitHub repository]
