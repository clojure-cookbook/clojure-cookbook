////
:Author: Kevin J. Lynagh
:Email: kevin@keminglabs.com
////


=== Visualizing Data with C2

===== Problem

You want to visualize data with HTML or SVG and CSS.

===== Solution

Use https://github.com/lynaghk/c2[C2] to draw, e.g., a bar chart.

In your dependencies:

[source, clojure]
----
[com.keminglabs/c2 "0.2.3"]
----

Then in a ClojureScript file associated with an HTML page containing a `<div id="barchart"></div>`.

[source,clojure]
----
(ns barchart
  (:require [c2.core :refer [unify]]
            [c2.scale :as scale]))

(def !my-data (atom {"A" 1, "B" 2, "C" 4, "D" 3}))

(bind! "#barchart"
       [:div#barchart
        [:h2 "Rad barchart!"]
        [:div.bars
         (unify !my-data
                (fn [[label val]]
                  [:div.bar
                   [:div.bar-fill {:style {:width (x-scale val)}}]
                   [:span.label label]]))]])
----


===== Discussion

C2 is a D3-inspired data visualization library for Clojure and ClojureScript.
As with D3, the core idea is to build declarative mappings from your data to HTML or SVG markup.
This lets you leverage CSS and the existing web ecosystem to construct bespoke data visualizations.

Compose pure functions to map your data to a Hiccup representation of the DOM, and then let C2 handle rendering into actual elements.
The `bind!` macro merges its body (which should evaluate into the desired Hiccup representation of the DOM) into the specified selector.
Watches are automatically added to any atoms dereferenced within the body, which is reevaluated (and DOM updated) when any of those atoms update.

C2 includes many functions useful for visualizing data, including linear and logarithmic scales, map projections, and axis templates.
Since C2 visualizations are just functions that output Hiccup representations of the DOM, they can be used both in ClojureScript (where they access a live DOM) and Clojure (where they render as markup strings).

TIP: Just because C2's ClojureScript Hiccup renderer allows you to inline CSS properties directly as maps doesn't mean you should put all of your styling there.
Keep the inline styles limited to the visual encodings you are making from the data (`left`/`top` in a scatterplot, `width` in a bar chart, `color` in a choropleth) and neatly place style-related CSS in full stylesheets.

===== See Also

* The extensive http://d3js.org/[D3.js] gallery for what's possible with HTML/SVG + CSS
* Any book by Stephen Few for practical tips on visualizing data
