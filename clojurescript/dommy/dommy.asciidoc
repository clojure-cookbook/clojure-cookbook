=== DOM manipulation and client side templating in ClojureScript
[role="byline"]
by Ian Davis, Aria Haghighi

==== Problem

You want to create and manipulate  DOM nodes natively in ClojureScript

==== Solution

Use https://github.com/Prismatic/dommy[Dommy], an open source project that provides fast, functional DOM
manipulation and templating.

Add the following dependency to your +project.clj+:

[source, clojure]
----
[prismatic/dommy "0.1.1"]
----

Dynamically generating DOM elements is simple with Dommy, and matches the excellent syntax of
https://github.com/weavejester/hiccup[Hiccup], a library for server-side templating in Clojure.

[source, clojure]
----
(def +default-avatar-attrs+
  {:style {:width "70px"
           :height "70px"}})

(deftemplate avatar [user]
  [:a.user-avatar {:href (:profile-url user)
    [:img.user-avatar-image ^:attrs (assoc +default-avatar-attrs+ :src (:img-url user)]]
----

Composing templates programmatically is simple too, giving you the ability to write much more
functional and idiomatic code.

[source, clojure]
----
(deftemplate list-element [item]
  [:li ^:text (:text item)])

(deftemplate my-list [items]
  [:#my-list.shopping-list
    [:ul (map list-element items)]
    [:buttom.remove-button "Clear list"])
----

To select for a DOM element, use either the +sel1+ function, which returns the first element matching a
selector, or +sel+ which returns a +seq+ of all elements matching the selector. They take two arguments,
the reference node and the selector. If you're just selecting from the +Document+ as a whole, you can omit
the reference node.

[source, clojure]
----
(sel (my-list some-items) :ul)
(sel1 :#login-submit-button)
----

For manipulating DOM nodes, use any of the functions in +dommy.core+, depending on what kind of manipulation
you want to do. If you're planning to do multiple changes at once to a single DOM node, make sure to use the
+->+ macro to keep things clean and organized.

[source, clojure]
----
(-> (sel1 :#login-submit-button)
    (dommy/set-style! :width "100px")
    dommy/show!)
----

For event-listeners, Dommy provides some extra special syntactic sugar. For instance, if you want to listen to
multiple events on a node, you can just list them both in the same call to +dommy/listen!+.

[source, clojure]
----
(dommy/listen! (sel1 :button.pwn)
               :mousedown (fn [e] (js/alert "Pwn!"))
               :touchstart (fn [e] (js/alert "Phone Pwn!"))))
----

If you want to listen dynamically on a node that can get switched out dynamically, use Dommy's live-listener
syntax. This requires that the reference node exist, but it checks for the existence of the child node when
the event actually fires.

[source, clojure]
----
(dommy/listen! [js/document :li.todo-list-item]
               :click #(js/alert "Removed item"))
----

Unlike in jQuery, Dommy methods only work on a single DOM object at a time. So, if you want to operate on all
DOM nodes of a given type (like what +sel+ returns) use ClojureScript's built-in sequence processing functions.
Since many Dommy methods operate using side-effects, use +doseq+ or +doall+ to avoid getting bitten by Clojure's
lazy sequences.

[source, clojure]
----
(->> (sel [:ul.my-list :li])
     (sort-by #(-> % (sel1 :input.last-name) .-value))
     (filter #(-> % (sel1 :input.age) .-value int (>= 21)))
     (take 10)
     (doseq #(dommy/add-class! % :first-ten-adults)))
----

==== Discussion

Let's take a closer look at what's actually going on in the two templates from before.

[source, clojure]
----
(def +default-avatar-attrs+
  {:style {:width "70px"
           :height "70px"}})

(deftemplate avatar [user]
  [:a.user-avatar {:href (:profile-url user)
    [:img.user-avatar-image ^:attrs (assoc +default-avatar-attrs+ :src (:img-url user))]])

(deftemplate list-element [item]
  [:li ^:text (:text item)])

(deftemplate my-list [items]
  [:#my-list.shopping-list
    [:ul (map list-element items)]
    [:buttom.remove-button "Clear list"])
----

* The first keyword in each vector always describes the element tag, including its classes and id, using css syntax.
If no tag is specified, it defaults to div. Thus, the +:#my-list.shopping-list+ becomes
+<div id="my-list" class="shopping-list">...</div>+
* If the second item in the vector is a map literal, or it type-hinted with +^:attrs+, then it's treated as an
attribute map.
* Any string literals (like +"Clear list"+ above), can simply be included in the vector. However, like with attributes,
if you're generating the value dynamically, you must type-hint it with +^:text+.
* The remaining items in the vector are all just recursively generated as child nodes.
* Any +lists+, like the +(map ...)+ above, create a document fragment, which means they eventually just get resolved
as a flat list of child nodes.

The reason you have to typehint when using +deftemplate+ is because Dommy relies on macros under the hood. In fact,
Dommy uses macros everywhere to help the ClojureScript compiler generate the most efficient Javascript it can.
This makes its templating and DOM selection faster than what you can get in Javascript.

[source, clojure]
----
(sel1 :body) ; => document.body
(sel1 :#my-id) ; => document.getElementById("my-id")
(sel parent :.child) ; => [].slice.call(parent.getElementsByClassName("child"))
(sel ".c1, .c2") ; => [].slice.call(document.querySelector(".c1, .c2"))

(deftemplate example [datum]
  [:li [:a {:href (str "#show/" (:key datum))}
        [:div.class1.class2 {:id (str "item" (:key datum))}
           [:span.anchor (:name datum)]]]])

----
[source, javascript]
----
$('body') // 15x slower than (sel1 :body)
$('#my-id') // 7x slower than (sel1 :#my-id)
$('.child', parent) // 2.5x slower than (sel parent :.child)
$('.c1, .c2') // 1.2x slower than (sel ".c1, .c2")

$('li').append(
  $('<a>').attr('href', '#show/' + datum.key)
          .addClass('anchor')
          .append( $('<div>').addClass('class1').addClass('class2')
                             .attr('id', 'item' + datum.key)
                             .append( $('<span>').text(datum.name) )))
// 3.5x slower than (deftemplate example ...)
----

And, finally, Dommy is very extensible. If you have your own objects that you want to play nice with Dommy,
all you have to do is implement the +PElement+ protocol. For each side-effect, Dommy returns the original input,
not the DOM node, which allows you to effortlessly combine the chaining of both DOM manipulation and object
manipulation:

[source, clojure]
----
(defprotocol PWidget
  (do-something! [this]))

(defrecord Widget [container data]
  dommy.templates/PElement
  (-elem [this] container)
  PWidget
  (do-something! [this]
     (do-stuff! data)))

(defn make-widget [data]
  (Widget. [:.widget data]))

(-> (make-widget “BIG DATA”)
    (dommy/add-class! :buzzword)
    do-something!
    (dommy/insert-after! (sel1 :.pre-widget-thing)))

----

==== See Also

* Examine Dommy in more depth and propose new changes by taking a look at
https://github.com/Prismatic/dommy[the source on GitHub].
* Peruse this excellent blog post by Fogus on to understand exactly how the macro-compilation process works:
http://blog.fogus.me/2012/04/25/the-clojurescript-compilation-pipeline/[The ClojureScript Compilation Pipeline]
* For a more detailed look into Dommy's performant use of macros, check out the posts on
http://blog.getprismatic.com/blog/2013/1/22/the-magic-of-macros-lighting-fast-templating-in-clojurescript[Templating]
and http://blog.getprismatic.com/blog/2013/4/29/faster-better-dom-manipulation-with-dommy-and-clojurescript[DOM manipulation]
on the Prismatic blog.
* Dommy isn't the only DOM manipulation library out there. Check out https://github.com/ibdknox/jayq[JayQ],
https://github.com/ckirkendall/enfocus[Enfocus], or https://github.com/levand/domina[Domina] if Dommy doesn't
do the trick for you.
