[[Connecting to an SQL Database with a Connection Pool]]
=== Connecting to an SQL Database with a Connection Pool

===== Problem

You would like to connect to an SQL database efficiently using a connection pool.

===== Solution

Use the +c3p0+ connection and statement pooling library to wrap your JDBC-based
drivers, creating a pooled data source. The pooled data source is then usable
by the +clojure.java.jdbc+ library, as described in the
<<Connecting to an SQL Database>> recipe.

Add a dependency to your Leiningen project file for the +c3p0+ library. You
will also need to add dependencies for the +clojure.java.jdbc+ library and the
JDBC library used with the RDBMS you are connecting to (e.g. MySQL):

[source,clojure]
----
:dependencies [ ; ...
                [org.clojure/java.jdbc "0.3.0-alpha4"]
                [mysql/mysql-connector-java "5.1.25"]
                [com.mchange/c3p0 "0.9.2.1"] ]
----

In addition to requiring the needed +clojure.java.jdbc+ library namespaces,
you must also import the +c3p0+ classes you intend to use:

[source,clojure]
----
(ns myproj.core
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.sql :as sql])
  (:import com.mchange.v2.c3p0.ComboPooledDataSource))
----

Create a database specification containing the parameters for accessing the
database:

[source,clojure]
----
(def db-spec {:classname "com.mysql.jdbc.Driver"
              :subprotocol "mysql"
              :subname "//localhost:3306/lotr_db"
              :user "bilbo"
              :password "secret"
              :max-pool-size 14})
----

Define a function (for convenience) which uses the parameters in the database
specification map to create a pooled data source:

[source,clojure]
----
(defn pooled-datasource [db-spec]
  (let [ {:keys [classname subprotocol subname user password
                 init-pool-size max-pool-size idle-time]} db-spec
         cpds (doto (ComboPooledDataSource.)
                (.setDriverClass classname)
                (.setJdbcUrl (str "jdbc:" subprotocol ":" subname))
                (.setUser user)
                (.setPassword password)
                (.setInitialPoolSize (or init-pool-size 7))
                (.setMaxPoolSize (or max-pool-size 11))
                ;; always expire excess connections after 30 minutes of inactivity:
                (.setMaxIdleTimeExcessConnections (* 60 30))
                ;; expire connections after inactivity (default 60 minutes):
                (.setMaxIdleTime (* 60 (or idle-time 60))) )]
    {:datasource cpds} ))
----

Use the convenience function to define a pooled data source for connecting to
your database:

[source,clojure]
----
(def pooled-db-spec (pooled-datasource db-spec))
----

Pass the database specification as the first argument to several of the
library's other functions which query and manipulate your database.

[source,clojure]
----
(jdbc/insert! pooled-db-spec :players
              {:name "Bilbo" :type "hobbit"} {:name "Galadriel" :type "elf"}
              {:name "Frodo" :type "hobbit"} {:name "Ori" :type "dwarf"})
;; -> (nil nil nil nil)

(jdbc/query pooled-db-spec (sql/select * :players (sql/where {:type "hobbit"})))
;; -> ({:type "hobbit", :name "Bilbo"} {:type "hobbit", :name "Frodo"})
----

===== Discussion

As shown above, the +clojure.java.jdbc+ library can create database
connections from JDBC data sources, which allows connections to be easily
pooled by the +c3p0+, or other, pooling library.

The +c3p0+ library wraps existing JDBC classes to allow the creation of
efficient data sources. It can adapt traditional unpooled drivers and
data sources by augmenting them with transparent pooling of +Connection+
and +PreparedStatment+ instances.

While there are several ways to create data sources with the +c3p0+ library,
most users will find the +ComboPooledDataSource+ class to be the easiest.

The +c3p0+ library has several dozen configuration parameters which control
the operation of the data source and its connections. Luckily, most of these
configuration parameters have built-in defaults. Parameters may be specified
to control such facets as the min, max, and initial pool size; the number of
idle connections; the age of connections; transaction handling; the use of
+PreparedStatement+ pooling; and if, when, and how pooled connections are
tested. Note that the idle time and pool size parameters are shown in the
example function above for illustration: they could have been omitted and
allowed to take their default values.

Pooled data resources (threads and database connections) may be released by
calling a static +destroy+ method on the +DataSources+ class of the +c3p0+
library, passing in the pooled data source object. Attempting to reuse the
pooled data source after it is closed will result in an SQL exception.
Most applications will not need to call the +destroy+ method but, if you do,
be sure to add the +DataSources+ class to the imports of your namespace.

[source,clojure]
----
(ns myproj.core ; ...
  (:import [com.mchange.v2.c3p0 ComboPooledDataSource DataSources]))
...
(DataSources/destroy (:datasource pooled-db-spec))
;; -> nil
----

===== See Also

* See <<Connecting to an SQL Database>> to learn about basic database connections with +clojure.java.jdbc+.
* See <<Manipulating an SQL Database>>to learn about using +clojure.java.jdbc+ to interact with an SQL database.

* See the +c3p0+ http://www.mchange.com/projects/c3p0/[documentation].
* Visit the +clojure.java.jdbc+ https://github.com/clojure/java.jdbc[GitHub repository] for more detailed information on the library.
