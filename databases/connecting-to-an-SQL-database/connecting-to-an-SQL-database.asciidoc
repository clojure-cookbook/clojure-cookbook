=== Connecting to an SQL Database

===== Problem

You want to connect your program to an SQL database.

===== Solution

Use the +clojure.java.jdbc+ library for JDBC-based access to SQL databases.

Add a dependency to your Leiningen project file for the +clojure.java.jdbc+
library. You will also need to add a dependency on the JDBC library appropriate
for the SQL database you are connecting to:

[source,clojure]
----
:dependencies [ ...
                [org.clojure/java.jdbc "0.3.0-alpha4"]
                [mysql/mysql-connector-java "5.1.25"] ]
----

Require the necessary parts of the +clojure.java.jdbc+ library in your Clojure source code:

[source,clojure]
----
(ns myproj.core
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.java.jdbc.sql :as sql]))

----

Create a database specification containing the parameters for accessing the
database. The specification is a simple Clojure map and includes such
parameters as the driver class name, the subprotocol for a particular database
type, the hostname, the port number, the database name, and the username and
password.

[source,clojure]
----
(def db-spec {
  :classname "com.mysql.jdbc.Driver"
  :subprotocol "mysql"
  :subname "//localhost:3306/lotr_db"
  :user "bilbo"
  :password "secret" })
----

Pass the database specification as the first argument to several of the
library's other functions which query and manipulate your database.

[source,clojure]
----
(jdbc/insert! db-spec :blocks_world
  {:color :RED :shape "square" :size 1.4}
  {:color :BLUE :shape "cone"  :size 2.0}
  {:color :WHITE :shape "rectangle" :size 0.5})
;; -> ({:generated_key 1} {:generated_key 2} {:generated_key 3})

(jdbc/query db-spec (sql/select * :blocks_world (sql/where {:shape "cone"})))
;; -> ({:color :BLUE :shape "cone"  :size 2.0})
----

===== Discussion

The +clojure.java.jdbc+ library provides functions which wrap the basic
capabilities of the Java JDBC specification. Additional namespaces in the
library implement small DSLs to generate basic SQL and basic DDL.

Because it relies upon Java JDBC, the +clojure.java.jdbc+ library is useable
with many of the most popular SQL databases; including Apache Derby, HSQLDB,
Microsoft SQL Server, MySQL, PostgreSQL, and SQLite.

Database records are represented as Clojure maps, with the table's column names
used as keys. Retrieval of a set of database records produces a sequence of
maps which can then be processed with all the normal Clojure functions.

[source,clojure]
----
(jdbc/query db-spec (sql/select * :abc_words))
;; -> ({:name "ant" :id 11} {:name "bat" :id 12} {:name "cat" :id 13}
;;     {:name "dog" :id 14} {:name "fat" :id 16} {:name "elf" :id 15})

(filter #(not (.endsWith (:name %) "at"))
  (jdbc/query db-spec (sql/select * :abc_words)))
;; -> ({:name "ant", :id 11} {:name "dog", :id 14} {:name "elf", :id 15})
----

Other Clojure libraries to access relational databases through JDBC exist.
These may provide more sophisticated DSLs for the manipulation of SQL
expresssions and results.

===== See Also

// TODO: link these when sections exist
* See <<sec_querying-an-SQL-database>> to learn more about querying with +clojure.java.jdbc+.
* See <<sec_using-SQL-database-DDL>> to learn more about manipulating DDL with +clojure.java.jdbc+.
* See <<sec_SQL-database-connection-pooling>> to learn more about connection pooling with +clojure.java.jdbc+.

* See The +clojure.java.jdbc+ library GitHub site (https://github.com/clojure/java.jdbc)
* See The Korma SQL site (http://sqlkorma.com/)
* See the HoneySQL site (https://github.com/jkk/honeysql)
