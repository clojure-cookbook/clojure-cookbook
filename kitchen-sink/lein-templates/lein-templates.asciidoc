=== Creating custom project templates

// by Travis Vachon (travis)

===== Problem

You regularly create new, similar projects and want an easy way to
generate customized boilerplate. Or, you work on an open source
project and want to give users an easy way to get started with your
software.

===== Solution

Leiningen templates give Clojure programmers an easy way to
automatically generate customized project boilerplate with a single
shell command. We'll explore them by creating a template for a simple
web service.

First, generate a new template with `lein new ...`. Use your own name
here because you'll be publishing this template to Clojars:

[source,console]
----
$ lein new template my-website-template-by-firstname-lastname
Generating fresh 'lein new' template project.
$ cd my-website-template-by-firstname-lastname
----

Create a new project file template:

.src/leiningen/new/my_website_template_by_firstname_lastname/project.clj
[source,clojure]
----
(defproject {{ns-name}} "0.1.0"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.5.1"]])
----

Since you are creating a template for a web service, you'll want
Clojure's `ring` and `ring-jetty-adapter` to be available by default,
so add them to the +:dependencies+ section:

[source,clojure]
----
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [ring "1.1.8"]
                 [ring/ring-jetty-adapter "1.2.0"]]
----

Next, open up the template definition  and add +project.clj+ to
the list of files to be generated. Modify the default logic to
expose a sanitized namespace string:

.src/leiningen/new/my_website_template_by_firstname_lastname.clj
[source,clojure]
----
(ns leiningen.new.my-website-template-by-firstname-lastname
  (:use [leiningen.new.templates :only [renderer name-to-path sanitize-ns ->files]]))

(def render (renderer "my-website-template-by-firstname-lastname"))

(defn my-website-template-by-firstname-lastname
  "FIXME: write documentation"
  [name]
  (let [data {:name name
              :ns-name (sanitize-ns name)
              :sanitized (name-to-path name)}]
    (->files data
             ["project.clj" (render "project.clj" data)]
             ["src/{{sanitized}}/foo.clj" (render "foo.clj" data)])))
----

A good template gives users a basic skeleton on which to build. Create
a new file with some barebones web server logic:

.src/leiningen/new/my_website_template_by_firstname_lastname/site.clj
[source,clojure]
----
(ns {{ns-name}}.site
    "My website! It will rock!"
    (:require [ring.adapter.jetty :refer [run-jetty]]))

(defn handler [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body "Hello World"})

(defn -main []
  (run-jetty handler {:port 3000}))
----

Go back to the project file template and make +my-website.site+ the
core runnable namespace for the project:

.src/leiningen/new/my_website_template_by_firstname_lastname/project.clj
[source,clojure]
----
  :main {{ns-name}}.site
----

Head back to your template definition and change

.src/leiningen/new/my_website_template_by_firstname_lastname.clj
[source,clojure]
----
["src/{{sanitized}}/foo.clj" (render "foo.clj" data)]
----

to

.src/leiningen/new/my_website_template_by_firstname_lastname.clj
[source,clojure]
----
["src/{{sanitized}}/site.clj" (render "site.clj" data)]
----

To test the template locally, head to the root of your template
project and run:

[source,console]
----
$ lein install
$ lein new my-website-template-by-firstname-lastname my-first-website
$ cd my-first-website
$ lein run
2013-08-22 16:41:43.337:INFO:oejs.Server:jetty-7.6.8.v20121106
2013-08-22 16:41:43.379:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
----

To make the template available to other users you'll need to publish it
to Clojars. Head to http://clojars.org[clojars.org] to create a
Clojars account and then deploy from the template project root:

[source,console]
----
lein deploy clojars
----

Other users can now create projects using your template by running

[source,console]
----
lein new my-website-template-by-firstname-lastname
----


===== Discussion

Leiningen uses Clojars as a well known source of templates. When you
pass a template name to +lein new+, it first looks for a template by
name in the local Maven repository. If it doesn't find it there it
will look for an appropriately named template on +clojars.org+. If it
finds one it will download the template and use it to create the
new project. The result is an almost magic-seeming project creation
interface which lends itself extremely well to getting Clojure
programmers going with new technology very quickly.

Once a project template has been downloaded, leiningen will use
+src/leiningen/new/your_template_name.clj+ to create a new project.
This file can be customized extensively to create sophisticated
templates that match your needs. We'll review this file and talk about
some of the tools available to the template developer.

[source,clojure]
----
(ns leiningen.new.my-website-template-travis
  (:require [leiningen.new.templates :refer [renderer name-to-path sanitize-ns ->files]]))
----

We first declare a namespace that matches the template name and
require some useful functions provided by Leiningen for template
development. +leiningen.new.templates+ contains a variety of other
functions you may find useful, and is worth reviewing before you
develop your own templates - problems you encounter during development
may already be solved by the library. In this case, +name-to-path+ and
+sanitize-ns+ will help us create strings that we'll substitute into
file templates in a number of places.


[source,clojure]
----
(def render (renderer "my-website-template-travis"))
----

A new project is generated by loading a set of mustache template files
and rendering them in the context of a named set of strings. The
`renderer` function creates a function that looks for mustache
templates in a place determined by the name of your template. In this
case it will look for templates in
+src/leiningen/new/my_website_template_by_firstname_lastname/+.

[source,clojure]
----
(defn my-website-template-travis
  "FIXME: write documentation"
  [name]
----

Continuing the spirit of "convention over configuration", Leiningen
will search this namespace for a function with the same name as your
template. You may execute arbitrary Clojure code in this function,
which means you can make project generation arbitrarily sophisticated.

[source,clojure]
----
  (let [data {:name name
              :ns-name (sanitize-ns name)
              :sanitized (name-to-path name)}]
----

This is the data our renderer will use to create your new project
files from the templates your provide. In this case we give our
templates access to the project name, the namespace that will result
from that name and a sanitized path based on that name..

[source,clojure]
----
    (->files data
             ["project.clj" (render "project.clj" data)]
             ["src/{{sanitized}}/site.clj" (render "site.clj" data)])))
----

Finally, we pass the +->files+ (pronounces "to files") function a list
of filename/content tuples. The filename determines where in the new
project a file will end up. Content is generated using the +render+
function we defined earlier. +render+ accepts a relative path to the
template file and the key/value map we created above.

Mustache templates are very simple, implementing nothing more than
simple key substition. For example, the following snippet is used to
generate the +ns+ statement for our new project's main file,
+site.clj+:

[source,clojure]
----
(ns {{ns-name}}.site
    "My website! It will rock!"
    (:require [ring.adapter.jetty :refer [run-jetty]]))
----

===== Conclusion

Leiningen templates are a powerful tool for saving Clojure developers
from the drudgery of project setup. More importantly, they are an
invaluable tool for open source developers to showcase their projects
and make it incredibly easy for potential users to get started with an
unfamiliar piece of software. If you've been developing Clojure for a
while, or even if you've just started, it's well worth your time to
take templates for a spin today!


===== See also

* https://github.com/technomancy/leiningen/blob/master/doc/TEMPLATES.md[Leiningen template documentation]
* https://github.com/technomancy/leiningen/blob/master/src/leiningen/new/templates.clj[leiningen.new.templates]
* http://mustache.github.io/[mustache templates]
