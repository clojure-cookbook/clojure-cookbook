=== Creating custom project templates

// by Travis Vachon (travis)

===== Problem

A generic Clojure project requires very little boilerplate, so by
default +lein+ just creates a minimal project file, a core code file,
a core test file and a few text files that encourage good behavior.

The domain you work in, however, may require you to create very similar
projects with some regularity. Whether you work for a consulting shop
and do lots of greenfield Clojure work, or work at a large company
creating many small services, you'll probably develop a core set of
dependencies and support files that you always want around. Open
source projects like Storm or Cascalog generally require a few
non-standard libraries, and can help their users come up to speed by
providing a starting point containing useful examples.

If you find yourself in any of these situations you'll eventually want
a simple way to create projects with a specific set of boilerplate so
that you can avoid tediously configuring project after project the
same way.

===== Solution

Leiningen templates provide exactly this functionality. Publishing a
template to Clojars enables +lein+ users to create customized projects
with one simple command. We'll explore this by creating a template
that lets Clojure programmers create a simple website.

To create your leiningen template, you'll first use a template designed
for creating templates. Replace firstname-lastname with your actual
first name and last name, or some other token that will be globally
unique - if you intend to publish your template to clojars, it must
have a globally unique name:

[source,console]
----
$ lein new template my-website-template-by-firstname-lastname
Generating fresh 'lein new' template project.
$ cd my-website-template-by-firstname-lastname
----

Create a new file called
+src/leiningen/new/my_website_template/project.clj+ and add a project
file template:

[source,clojure]
----
(defproject {{ns-name}} "0.1.0"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.5.1"]])
----

add two new dependencies to this project file, making your +:dependencies+
section look like this:

[source,clojure]
----
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [ring "1.1.8"]
                 [ring/ring-jetty-adapter "1.2.0"]]
----

Then, open up the template definition at
+src/leiningen/new/my_website_template.clj+ and add +project.clj+ to
the list of files to be generated. We also modify the default logic to
expose a sanitized namespace string:

[source,clojure]
----
(ns leiningen.new.my-website-template-by-firstname-lastname
  (:use [leiningen.new.templates :only [renderer name-to-path sanitize-ns ->files]]))

(def render (renderer "my-website-template-by-firstname-lastname"))

(defn my-website-template-by-firstname-lastname
  "FIXME: write documentation"
  [name]
  (let [data {:name name
              :ns-name (sanitize-ns name)
              :sanitized (name-to-path name)}]
    (->files data
             ["project.clj" (render "project.clj" data)]
             ["src/{{sanitized}}/foo.clj" (render "foo.clj" data)])))
----

Next we'll create add a starting point for users of our template.
Create a new files called
+src/leiningen/new/my_website_template/site.clj+ and add the following
content:

[source,clojure]
----
(ns {{ns-name}}.site
    "My website! It will rock!"
    (:require [ring.adapter.jetty :refer [run-jetty]]))

(defn handler [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body "Hello World"})

(defn -main []
  (run-jetty handler {:port 3000}))
----

Go back to +src/leiningen/new/my_website_template/project.clj+ and
make +my-website.site+ the core runnable namespace for the project by
adding:

[source,clojure]
----
  :main {{ns-name}}.site
----

to the project map.

Head back to +src/leiningen/new/my_website_template.clj+ and change

[source,clojure]
----
["src/{{sanitized}}/foo.clj" (render "foo.clj" data)]
----

to

[source,clojure]
----
["src/{{sanitized}}/site.clj" (render "site.clj" data)]
----

To test the template locally, head to the root of your template
project and run:

[source,console]
----
$ lein install
$ lein new my-website-template-by-firstname-lastname my-first-website
$ cd my-first-website
$ lein run
2013-08-22 16:41:43.337:INFO:oejs.Server:jetty-7.6.8.v20121106
2013-08-22 16:41:43.379:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
----

To make the template available to other users we'll need to publish it
to Clojars. Head to http://clojars.org[clojars.org] to create a
Clojars account and then deploy from the template project root:

[source,console]
----
lein deploy clojars
----

Other users can now create projects using your template by running

[source,console]
----
lein new my-website-template-by-firstname-lastname
----


===== Discussion

Leiningen uses Clojars as a well known source of templates. When you
pass a template name to +lein new+, it first looks for a template by
name in the local Maven repository. If it doesn't find it there it
will look for an appropriately named template on +clojars.org+. If it
finds one there it will download the template and use it to create the
new project. The result is an almost magic-seeming project creation
interface which lends itself extremely well to getting Clojure
programmers going with new technology very quickly.

Once a project template has been downloaded, leiningen will use
+src/leiningen/new/your_template_name.clj+ to create a new project.
This file can be customized extensively to create sophisticated
templates that match your needs. We'll review this file and talk about
some of the tools available to the template developer.

[source,clojure]
----
(ns leiningen.new.my-website-template-travis
  (:require [leiningen.new.templates :refer [renderer name-to-path sanitize-ns ->files]]))
----

We first declare a namespace that matches the template name and
require in some useful functions provided by leiningen for template
development. +leiningen.new.templates+ contains a variety of other
functions you may find useful, and is worth reviewing before you
develop your own templates - problems you encounter during development
may already be solved by the library. In this case, +name-to-path+ and
+sanitize-ns+ will help us create strings that we'll substitute into
file templates in a number of places.


[source,clojure]
----
(def render (renderer "my-website-template-travis"))
----

A new project is generated by loading a set of mustache template files
and rendering them in the context of a named set of strings. The
`renderer` function creates a function that looks for mustache
templates in a place determined by the name of your template. In this
case it will look for templates in
+src/leiningen/new/my_website_template/+.

[source,clojure]
----
(defn my-website-template-travis
  "FIXME: write documentation"
  [name]
----

Continuing the spirit of "convention over configuration", leiningen
will search this namespace for a function with the same name as your
template. You may execute arbitrary Clojure code in this function,
which means you can make project generation arbitrarily sophisticated.

[source,clojure]
----
  (let [data {:name name
              :ns-name (sanitize-ns name)
              :sanitized (name-to-path name)}]
----

This is the data our renderer will use to create your new project
files from the templates your provide. In this case we make the
project name, the namespace that will result from that name, and a
sanitized path based on that name available to all of our template
files.

[source,clojure]
----
    (->files data
             ["project.clj" (render "project.clj" data)]
             ["src/{{sanitized}}/site.clj" (render "site.clj" data)])))
----

Finally, we pass +->files+ (read "to files") a list of
filename/content tuples. The filename determins where in the new
project a file will end up. Content is generated using the +render+
function we defined earlier. +render+ accepts a path to the template
file relative to the expected template directory and the key/value map
we created above.

Mustache templates are very simple, implementing nothing more than
simple key substition. For example, the following snippet is used to
generate the +ns+ statement for our new project's main file,
+site.clj+:

[source,clojure]
----
(ns {{ns-name}}.site
    "My website! It will rock!"
    (:require [ring.adapter.jetty :refer [run-jetty]]))
----

====== Conclusion

Leiningen templates are a powerful tool for saving Clojure developers
from the drudgery of project setup. More importantly, they are an
invaluable tool for open source developers to showcase their projects
and make it incredibly easy for potential users to get started with an
unfamiliar piece of software. If you've been developing Clojure for a
while, or even if you've just started, it's well worth your time to
take templates for a spin today!


===== See also

* https://github.com/technomancy/leiningen/blob/master/doc/TEMPLATES.md[Leiningen template documentation]
* https://github.com/technomancy/leiningen/blob/master/src/leiningen/new/templates.clj[leiningen.new.templates]
* http://mustache.github.io/[mustache templates]
