[[sec_red_black_part_ii]]
=== Implementing custom data structures: Red Black Trees - Part II

// By Leonardo Borges (leonardoborges)

===== Problem

You wish to use clojure core sequence functions such as +map+ and +filter+ on a custom data structure

===== Solution

In <<sec_red_black_part_i>> of this recipe you implemented all the functions necessary for creating an efficient Red Black Tree. 

The missing part now is to make this custom data structure participate into Clojure's sequence abstractions.

Start by defining the protocols which make up our new type:  

[source,clojure]
----
(defprotocol IRedBlackTree
  "RedBlackTree public API functions"
    (find [this x])
    (insert [this x]))

(defprotocol IRedBlackTreeNode
  "Functions for accessing specific node values.
  Each node is a 4-element vector of the shape:
     [colour left value right]"
  (value  [this])
  (colour [this])
  (left   [this])
  (right  [this]))
----

Next, extend +clojure.lang.PersistentVector+ and make it implement the +IRedBlackTreeNode+ protocol - remember we represent tree nodes as vectors:

[source,clojure]
----
(extend-type clojure.lang.PersistentVector
  IRedBlackTreeNode
  (value  [this]
    (nth this 2))

  (colour  [this]
    (nth this 0))

  (left  [this]
    (nth this 1))

  (right  [this]
    (nth this 3)))
----

Finally, define a new type, +RedBlackTree+, which implements the +IRedBlackTree+ protocol as well as Clojure's sequence interfaces:

[source,clojure]
----    
(defn- rb-tree->tree-seq
  "Takes a RedBlackTree type and returns a sequence of all its children using `tree-seq`"
  [rb-tree]
  (tree-seq sequential? (fn [parent]
                          (filter (complement nil?) [(left parent) (right parent)]))
            (.tree rb-tree)))

;; The RedBlackTree type
(deftype RedBlackTree [tree]
    IRedBlackTree
    (find [this x]
      (find-val tree x))

    (insert [this x]
      (RedBlackTree. (insert-val tree x)))
    
    clojure.lang.ISeq
    (first [this]
      (first (rb-tree->tree-seq this)))

    (next [this]
      (next (rb-tree->tree-seq this)))

    (seq [this]
      (if (seq? this)
        this
        nil))
    
    (more [this]
      (if-let [n (next this)]
        n
        [])))


;; Necessary for printing custom types at the repl
(defmethod print-method RedBlackTree [o, ^java.io.Writer w]
  (.write w (str "[RedBlackTree] "(.tree o))))
----

Now you're ready to use it:

[source,clojure]
----
;; Load some data
(def rb-tree (reduce insert (RedBlackTree. nil) (range 10)))

;; Find specific values
(find rb-tree 9)   ; 9
(find rb-tree 100) ; nil
----

It doesn't look so different from before. We only replaced the previous function calls with calls to functions from the +IRedBlackTree+ protocol. What's new now is that we can use core sequence functions such as +map+ and +filter+: 

[source,clojure]
----
;; Get a seq of all values in the tree 
(map value rb-tree) 
;; (3 1 0 2 5 4 7 6 8 9)  


;; Get a seq of vectors representing each node's colour and value
(map #(vec [(colour %) (value %)]) rb-tree) 
;; ([:black 3] [:black 1] [:black 0] [:black 2] [:black 5] [:black 4] 
;;  [:red 7] [:black 6] [:black 8] [:red 9])


;; Filter all even nodes in the tree
(filter #(even? (value %)) rb-tree) 
;;([:black nil 0 nil] [:black nil 2 nil] [:black nil 4 nil] [:black nil 6 nil] 
;; [:black nil 8 [:red nil 9 nil]])
----


===== Discussions

In <<sec_red_black_part_i>> we decided to represent tree nodes as 4-element vectors. However they are not nice to work with as you need to remember which index represents which piece of information:

[source,clojure]
----
(def rb-node [:red nil 3 [:black nil 4 nil]])
(nth rb-node 0) ; get the colour
;; :red

(nth rb-node 2) ; get the value
;; 3
----

To make pulling information out of a node more idiomatic, we created a protocol to expose the basic API of a node: 

[source,clojure]
----
(defprotocol IRedBlackTreeNode
  "Functions for accessing specific node values.
  Each node is a 4-element vector of the shape:
     [colour left value right]"
  (value  [this])
  (colour [this])
  (left   [this])
  (right  [this]))
----

This protocol isn't useful on its own. We need a type to implement it in order for it to do its job. Normally, you would implement a protocol in a new type or record. But we already have a type that represents our node beatifully, +clojure.lang.PersistentVector+, so we simply extend the protocol to it:

[source,clojure]
----
(extend-type clojure.lang.PersistentVector
  IRedBlackTreeNode
  (value  [this]
    (nth this 2))

  (colour  [this]
    (nth this 0))

  (left  [this]
    (nth this 1))

  (right  [this]
    (nth this 3)))
----

This makes standard Clojure vectors behave like tree nodes, as you can see below:

[source,clojure]
----
(def rb-node [:red nil 3 [:black nil 4 nil]])
(colour rb-node) ; get the colour
;; :red

(value rb-node) ; get the value
;; 3  
----

The code is shorter and expresses its intent clearly. As an added bonus, we get to use these functions in higher level sequence operations suchs as +map+:

[source,clojure]
----
; we get to write this
(map value rb-tree) 

;; as opposed to
(map #(nth % 2) rb-tree) 
----


WARNING: The ability to extend existing types with extra protocols is
extremely powerful but care should be taken not to cause conflicts with 
any existing functions in the type being extended. Lucky for us, extended 
types are confined to the namespaces in which they are used, minimising 
problems.

This brings us to the +map+ function and what allows us to use it with our custom data structure. If you look under the hood, at the source of +map+, you'll see something like this - I omitted a lot of the implementation to highlight the core of what map is doing: 

[source,clojure]
----
;; Other arities and implementation details omitted
(defn map [f coll]
    (lazy-seq
     (when-let [s (seq coll)]
       (if (chunked-seq? s)
         ;; handle chunked seqs
         (cons (f (first s)) (map f (rest s)))))))
----

Pay attention to the last line. +map+ eventually calls +first+ and +rest+ on its argument in order to build the resulting sequence. +rest+ in turn calls +more+ on the sequence. 

This indicates that, at the very minimum, our custom type has to support these operations. But where do they come from? I'm glad you asked! 

They live in the +clojure.lang.ISeq+ java interface:

[source,java]
----
public interface ISeq extends IPersistentCollection {

  Object first();

  ISeq next();

  ISeq more();

  ISeq cons(Object o);

}
----

This is great. We know which functions to implement and we know which interface they live in. All that is left is to create a sequence representation of our tree nodes. This is where +rb-tree->tree-seq+ comes into play.

When mapping and/or filtering over our tree, we don't care about specific ordering so a depth-first walk will suffice. To that end, we can leverage Clojure's own +tree-seq+ function. From its docstring:

[source,clojure]
----
clojure.core/tree-seq
([branch? children root])
  Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
   branch? must be a fn of one arg that returns true if passed a node
   that can have children (but may not).  children must be a fn of one
   arg that returns a sequence of the children. Will only be called on
   nodes for which branch? returns true. Root is the root node of the
  tree.
----

Now we can revisit the implementation of +rb-tree->tree-seq+:

[source,clojure]
----
(defn- rb-tree->tree-seq
  "Takes a RedBlackTree type and returns a sequence of all its children using `tree-seq`"
  [rb-tree]
  (tree-seq sequential? (fn [parent]
                          (filter (complement nil?) [(left parent) (right parent)]))
            (.tree rb-tree)))
----

Given a node - which is just a 4-element vector - we can tell which of the elements are branches by asking if they are +sequential?+. Then we create an anonymous function that, when given a node, will return a vector of its branches if any. The root is, of course, the actual Red Black Tree.  

The implementation of the functions +first+ and +next+ from +clojure.lang.ISeq+ should be clearer now:

[source,clojure]
----
clojure.lang.ISeq
  (first [this]
    (first (rb-tree->tree-seq this)))

  (next [this]
    (next (rb-tree->tree-seq this))) 
----

The other interface functions have straightforward implementations.

===== See Also

* <<sec_red_black_part_i>>