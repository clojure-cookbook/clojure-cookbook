== Simple Profiling with Timbre

==== Problem

You want fine-grained statistics on the running time and invocation counts
of your code.

==== Solution

Use https://github.com/ptaoussanis/timbre[Timbre]
by inserting profiling macros into your code, without performance penalty in production.

[source,clojure]
----
(ns cookbook.profiling-timbre
  (:require [taoensso.timbre.profiling :as p]))

(defn bench-me [f]
  (p/p :bench/bench-me
    (let [_ (p/p :bench/sleep 
              (Thread/sleep 10))
          n (p/p :bench/call-f-once 
              (f))
          _ (p/p :bench/call-f-10-times-outer
              (dotimes [_ 10]
                (p/p :bench/call-f-10-times-inner
                  (f))))]
      (iterate f n))))

(p/profile :info :Bench-f
  (bench-me
    (fn ([] (p/p :bench/no-arg-f) 100)
        ([a] (p/p :bench/one-arg-f) +))))
----

Here we define a Clojure function `bench-me`, which is called with a
higher-order function `f` which takes zero or one argument.

Timbre outputs rich profiling information in a convenient table.

[source,console]
----
2013-Aug-25 11:23:31 +0800 ambrose-VirtualBox INFO [book.profiling-timbre] - Profiling :taoensso.timbre.profiling/Bench-f
                        Name  Calls       Min        Max       MAD      Mean   Time% Time
             :bench/bench-me      1      13ms       13ms       0ns      13ms      95 13ms
                :bench/sleep      1      11ms       11ms       0ns      11ms      76 11ms
:bench/call-f-10-times-outer      1     970μs      970μs       0ns     970μs       7 970μs
          :bench/call-f-once      1     610μs      610μs       0ns     610μs       4 610μs
:bench/call-f-10-times-inner     10      20μs      214μs      35μs      39μs       3 394μs
             :bench/no-arg-f     11       5μs      163μs      26μs      20μs       2 215μs
                [Clock] Time                                                     100 14ms
              Accounted Time                                                     186 26ms
----

=== Discussion

Profiling with Timbre is a great solution for Clojure-only profiling.
Standard JVM profiling tools like YourKit and JVisualVM provide more comprehensive
information on Java methods, but come with a greater performance penalty.

Timbre's profiling is most useful when profiling a specific area of code, than
than using profiling as an exploratory tool for tuning performance.
As profiling markers are just macros, they are flexible. For example, you could
record how many times a particular +if+ branch was taken, all without leaving Clojure
or suffering from mangled Clojure function names via YourKit or JVisualVM.

If profiling is deemed useful enough to keep in your code base,
it good practice to use the profiling macros via a namespace alias.
`p`, while conveniently named, is prone to being shadowed by local bindings
if used without an explicit namespace.
In the solution we used the alias `p`, and each call to `p` becomes `p/p`.

Remember, you should not be hesitant to add profiling statements: there is no performance
penalty for code involving `taoensso.timbre.profiling/p` if tracing is not enabled.
This means you can leave tracing code in production, which is useful if you want to
profile the same code later, or if the profiling comments make your code clearer.

=== See also 

https://github.com/ptaoussanis/timbre#profiling(Profiling with Timbre)
