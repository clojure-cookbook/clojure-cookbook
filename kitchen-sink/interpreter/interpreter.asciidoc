[[sec_core_match_interpreter]]
=== Write an Interpreter to Simulate Another Language

// By Chris Frisz (cjfrisz)

===== Problem

// TODO: Add core.match lein-try command.

You want to prototype another language and host it in Clojure to take
advantage of its libraries and runtime and not have to write your own.

For this interpreter, we'll use the simplified Clojure language 
described in a previous recipe, <<sec_core_match_parser>>.
Using `core.match`, which we'll call LC for "Limited Clojure." You can 
read a full description of the syntax of LC in the previous recipe, but 
here's a summary of the expressions in the language:

  * Variables
  * `fn` expressions that take one argument and have a single 
    body expression 
  * Application of one expression to another another expression

The preceding expressions tell us the __syntax__ of LC, but say nothing 
about how it executes, or what we call __semantics__. As noted before, 
our language should work like a simplified version of Clojure. In order
to understand how to emulate Clojure's semantics for LC, we need to
discuss the idea of __lexical scope__.

Simply put, lexical scope is the property that a variable carries the 
value of its nearest enclosing binding, such as in a `let` or as an
argument to a `fn`. Consider a few examples:

[source, clojure]
----
;; The inner 'let' expression is the nearest lexical binding for x
(let [x 12]
  (let [x 5]
    x))
;; -> 5

;; The 'x' argument to the 'fn' is a binding for 'x'
(let [x 12]
  ((fn [x] x) 5))
;; -> 5
----

===== Solution

Start from the parser in the previous recipe, again using core.match.
Note that the function name is changed to `lc-interpret` to match its
intended functionality:

[source, clojure]
----
(defn lc-interpret
  [expr]
  (match [expr]
    [(var :guard symbol?)] {:variable var}
    [(['fn [arg] body] :seq)] {:closure 
                               {:arg arg 
                                :body (lc-interpret body)}}
    [([operator operand] :seq)] {:application 
                                 {:rator (lc-interpret operator)
                                  :rand (lc-interpret operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))
----

Add an argument to `lc-interpret`, `env`, for a hash-map that matches 
variables to their values if they are bound:

[source, clojure]
----
(defn lc-interpret
  [expr env]
  (match [expr]
    [(var :guard symbol?)] {:variable var}
    [(['fn [arg] body] :seq)] {:closure 
                               {:arg arg 
                                :body (lc-interpret body)}}
    [([operator operand] :seq)] {:application 
                                 {:rator (lc-interpret operator)
                                  :rand (lc-interpret operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))
----

Change the right-hand side of the `var` line to look up the value in 
the environment hash-map or else report the variable as being unbound:

[source, clojure]
----
(defn lc-interpret
  [expr env]
  (match [expr]
    [(var :guard symbol?)] (or (get env var) {:unbound-var var})
    [(['fn [arg] body] :seq)] {:closure 
                               {:arg arg 
                                :body (lc-interpret body)}}
    [([operator operand] :seq)] {:application 
                                 {:rator (lc-interpret operator)
                                  :rand (lc-interpret operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))
----

Next, change the `fn` line to create a closure (don't worry; closures
will be covered in the discussion):

[source, clojure]
----
(defn lc-interpret
  [expr env]
  (match [expr]
    [(var :guard symbol?)] (or (get env var) {:unbound-var var})
    [(['fn [arg] body] :seq)] (fn [val]
                                (lc-interpret body (assoc env arg val)))
    [([operator operand] :seq)] {:application 
                                 {:rator (lc-interpret operator)
                                  :rand (lc-interpret operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))
----

Finally, update the application line to apply the value of the operator
to the value of the operand:

[source, clojure]
----
(defn lc-interpret
  [expr env]
  (match [expr]
    [(var :guard symbol?)] (or (get env var) {:unbound-var var})
    [(['fn [arg] body] :seq)] (fn [val]
                                (lc-interpret body (assoc env arg val)))
    [([operator operand] :seq)] ((lc-interpret operator env) 
                                  (lc-interpret operand env))
    :else (throw (Exception. (str "invalid expression: " expr)))))

(lc-interpret 'a {})
;; -> {:unbond-var a}

(lc-interpret 'a {'a {:unbound-var 'x}})
;; -> {:unbound-var 'x}

;; 'a maps to a `fn', so this returns an opaque `fn' reference
(lc-interpret 'a {'a (fn [val] (lc-interpret 'b {}))})
;; -> #<user$eval3964$fn__3965 user$eval3964$fn__3965@59c7d395>

;; like the example above this maps to an opaque `fn' reference
(lc-interpret '(fn [x] x) {})
;; -> #<user$eva3897$fn__3904 user$eval3904$fn__3905@7077092>

(lc-interpret '((fn [x] x) a) {})
;; -> {:unbound-var a}
----

===== Discussion

You should first note the new `env` argument used for the variable
environment. As explained briefly in the solution above, it maps 
variable names to their respective values in much the same way that 
Clojure maps variable references to their values, which the solution 
pretty naturally represents as a hash-map. The usage hopefully becomes 
clear by examining the first match line:

[source, clojure]
----
...
    [(var :guard symbol?)] (or (get env var) {:unbound-var var})
...
----

When the interpreter encounters a variable, it looks the value up in
the environment. If the environment contains no mapping, it returns 
the variable with a tag to say that it's unbound.

Likely the trickiest part of this code comes from the `fn` line:

[source, clojure]
----
...
    [(['fn [arg] body] :seq)] (fn [val]
                                (lc-interpret body (assoc env arg val)))
...
----

The solution somewhat cryptically referred to the right-hand side as a
``closure'' without explaining what that is. Here's a simple (and 
terse) definition:

.Closure
****
A closure is a function and the values of its free variables
****

This is probably clearer from an example:

[source, clojure]
----
(let [x 5]
  ((fn [y] (+ x y)) 3))
;; -> 8
----

In the above example, the variable `x` in the `fn` expreesion had the
value 5 even though `x` was not bound inside the `fn` expression 
itself. Rather, the value for `x` was ``inherited'' from the `let` 
expression. That is, the `fn` expression _closed over_ the value for x.

The code for producing a closure in `lc-interpret` achieves this 
``closing over'' of the values in a `fn` expression by storing the
variable environment at the point where the function is evaluated, 
but has not yet been invoked. Once the function receives an argument
(i.e. the `val` argument to the Clojure `fn` expression), it adds a
mapping from the LC variable to the argument value into the stored 
environment. Finally, the body expression of the LC `fn` expression
gets interpreted with respect to the stored and augmented environment.

The last expression type, function application, is straightforward:

[source, clojure]
----
...
    [([operator operand] :seq)] ((lc-interpret operator env) 
                                  (lc-interpret operand env))
...
----

The solution evaluates both the operator and the operand using the 
variable environment passed into `lc-interpret` and applies the 
value of the operator to the value of the operand. You can simply apply
the operator because if it is a valid LC expression, it will either
evaluate to a closure, which is in effect a function according to the
description above, or to a variable that itself either maps to a 
function or is unbound. In the latter case, the interpreter will return
`nil`, indicating that even though the expression used proper LC 
syntax, it could not be evaluated successfully.
