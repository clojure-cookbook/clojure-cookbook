////
:Author: David McNeil
////

[[extend_built_in]]

=== Extending a Built-in Type

===== Problem

You need to extend one of the built-in types with your own functions.

===== Solution

Suppose for example you would like to add domain specific functions to the core +java.lang.String+ type. In this example, we will add a +first-name+ and +last-name+ function to +String+.

Define a protocol with the functions you need. The protocol declares the signature of the functions.

[source,clojure]
----
(defprotocol Person
  "Represents the name of a person."
  (first-name [person])
  (last-name [person]))
----

Extend the type to the +java.lang.String+ class:

[source,clojure]
----
(extend-type String
  Person
  (first-name [s] (first (clojure.string/split s #" ")))
  (last-name [s] (second (clojure.string/split s #" "))))
----

Now we can invoke our functions on Strings.

[source,clojure]
----
(first-name "john")
;; -> "john"

(last-name "john smith")
;; -> "smith"
----

===== Discussion

Use this approach instead of a multi-method when you want to tap into the higher performance dispatching of protocols. Note that protocol functions dispatch on the type of the first parameter.

It is good practice to only extend a protocol to a type if you are the author of either the protocol or the type. This will avoid cases where you violate the assumptions of the original authors.

If you already had functions to use, then it would make sense to use +extend+ instead of the +extend-type+ form.

[source,clojure]
----
(defn first-word [s]
  (first (clojure.string/split s #" ")))

(defn second-word [s]
  (second (clojure.string/split s #" ")))
  
(extend String
  Person
  {:first-name first-word
   :last-name second-word})
----