[[sec_default_data_reader]]
=== Default Data-Reader

===== Problem

You want to read **edn** data that might have unknown tagged literals.

===== Solution

Use the :default option with +clojure.edn/read+ on a stream or +clojure.edn/read-string+
on a string. 

[source,clojure]
----
(defrecord TaggedValue [tag value])

(defn my-read-string [s]
  (clojure.edn/read-string {:default ->TaggedValue} s))

(my-read-string "#my.example/unknown 42")
;; -> #user.TaggedValue{:tag my.example/unknown, :value 42}
----

===== Discussion

The **edn** format defines a print representation for a significant subset of Clojure datatypes and
offers extensiblibilty through tagged literals.  The best way to read **edn** data is to use
+clojure.edn/read+ on a stream or +clojure.edn/read-string+ on a string.  Both functions take the
same style of an *opts* map, which allows you to control several options when reading.

The +:readers+ key in the *opts* map extends support to literal tags beyond the built-in ones
pre-defined by +clojure.core/default-data-readers+.  In order to handle unknown keys, you can
associate your own default data-reader function with the +:default+ key.  Your function will be
called with the unknown tag and value anytime no data-reader is found for a tag.  If no default is
given, the unknown tag will cause an exception.  

For many applications, reading an unknown tag is an error so an exception would be appropriate.
However, there are other situations where a program needs to preserve the "unknowns," perhaps for a
another stage of processing.  That's a good reason to use a default data-reader.

As the simple example demonstrates, you can take advantage of the factory function defined by
+defrecord+ to capture the unknown reader literal.  The order of the arguments for the factory of
TaggedValue conveniently matches the specification of the :default data-reader.  The TaggedValue
record preserves the essential information for later use.  You might even want to print it again in
the original tagged literal format.

Here's a print-method that will maintain the original representation of the "unknown" tagged literal:

[source,clojure]
----
(defmethod print-method TaggedValue [this ^java.io.Writer w]
   (.write w "#")
   (print-method (:tag this) w)
   (.write w " ")
   (print-method (:value this) w))

;; Now, the TaggedValue will `pr` as the original tagged literal
(my-read-string "#my.example/unknown 42")
;; -> #my.example/unknown 42
----

On a related note, +clojure.core/read+ and +clojure.core/read-string+ are for reading code and data
from trusted sources, typically your program and its libraries.  (Notice the difference in the
namespace: +clojure.core+ versus +clojure.edn+.)  We won't get into the details here, but it is
considered unsafe to read arbitrary user input with the clojure.core read functions because
pathological cases can cause code to be executed.  (That's actually a feature, but it must be used
wisely.)  These core functions check a handful of dynamic variables to control their detailed
behavior rather than an "opts" argument.  For example, the `*default-data-reader-fn*` determines how
the core functions deal with unknown tags.  See also, `*data-readers*` and `*read-eval*` for more
information.  For reading data, it's generally better to use the **edn** variants.

===== See Also

* **edn** https://github.com/edn-format/edn
* <<sec_edn_record>>

