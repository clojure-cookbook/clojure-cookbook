[[sec_core_match_parser]]
=== Make a Parser for Clojure Expressions Using `core.match`

// By Chris Frisz (cfrisz)

===== Problem

You want to parse Clojure expressions, say, from the input to a macro,
into a different representation (like maps).

For this example, consider a heavily simplified version of Clojure that 
consists of the following expression types:

  * A variable represented by a valid Clojure symbol
  * A `fn` expression that accepts a single argument and whose body is
    also a valid expression
  * Application of a valid expression in the language to another valid 
    expression

You can represent this language by the following grammar:

  Expr = var
       | (fn [var] Expr)
       | (Expr Expr)

===== Solution

Use `core.match` to pattern match over the input and return the 
expression represented as maps of maps. 

[source, clojure]
----
(require '[clojure.core.match :refer (match)])

(defn simple-clojure-parser
  [expr]
  (match [expr]
    [(var :guard symbol?)] {:variable var}
    [(['fn [arg] body] :seq)] {:closure 
                               {:arg arg 
                                :body (simple-clojure-parser body)}}
    [([operator operand] :seq)] {:application 
                                 {:rator (simple-clojure-parser operator)
                                  :rand (simple-clojure-parser operand)}}
    :else (throw (Exception. (str "invalid expression: " expr)))))

(simple-clojure-parser 'a)
;; -> {:variable a}

(simple-clojure-parser '(fn [x] x))
;; -> {:closure {:arg x :body x}}

(simple-clojure-parser '((fn [x] x) a))
;; -> {:application {:rator {:closure {:arg x :body x}} :rand a}}

;; fn expression can only have one argument!
(simple-clojure-parser '(fn [x y] x))
;; -> Exception invalid expression: (fn [x y] x)
----

===== Discussion

The first match pattern, `[(var :guard symbol?)]`, matches the variable 
case, binding the matched expression to `var`. The special `:guard` 
form applies the predicate `symbol?` to `var`, and the right- hand side
of the match executes only if `symbol?` returns `true`.

The second pattern, `[(['fn [arg] body] :seq)]`, matches the `fn` case
footnote:[The match pattern for `fn` could (and should) include a guard
on the `arg` to ensure that it's a symbol, but that's elided it here 
for brevity.].  Note the special `([...] :seq)` syntax for matching 
over lists, used here to represent a `fn` expression. Also notice 
that to match on the literal `fn`, it had to be quoted in the match 
pattern.  Interestingly, since the `body` expression should also be 
accepted by this parser, it makes a self-recursive call,
`(simple-clojure-parser body)`, in the right-hand side of the match 
pattern.

For the third, so-called "application" pattern, the parser again 
matches on a list using the `([...] :seq)` syntax. Like the body of the
`fn` expression, both the `operator` and `operand` expressions should 
be accepted by the parser, so it make a recursive call for each one.

Finally, the parser throws an exception if the given expression doesn't
match any of the three accepted patterns. This gives a somewhat more 
helpful error message if you accidentally hand the parser a malformed 
expression.

Writing your parser this way gives you succinct code that closely 
resembles the target input. Alternatively, you could write it 
using conditional expressions (`if` or `cond`) and explicitly 
destructured the input. To illustrate the difference in length and 
clarity of the code, consider this function that only parses the `fn` 
expressions of the Clojure subset:

[souce, clojure]
----
(defn parse-fn
  [expr]
  (if (and (list? expr) 
           (= (count expr) 3)
           (= (nth expr 0) 'fn) 
	   (vector? (nth expr 1))
           (= (count (nth expr 1)) 1))
      {:closure {:arg (nth (nth expr 1) 0)
                 :body (simple-clojure-parser (nth expr 2))}}
      (throw (Exception. (str "unexpected non-fn expression: " expr)))))
----

Notice how much more code this version needed in order to express the 
same properties about a `fn` expression? Not only did the non-`match` 
version require more code, but the `if` test doesn't resemble the 
structure of the expression the way the `match` pattern does. Plus, 
`match` binds the matched input to the variable names in the match 
pattern automatically, saving you from having to `let`-bind them 
yourself or repeatedly write the same list access code (as shown with
`(nth expr)` in `parse-fn` above). Needless to say, the `match` is much 
easier to read and maintain.

The language used by this parser also appears in <<sec_core_match_interpreter>> 
explaining how to write an interpreter for it. Readers that already 
recognize the language will probably find it completely unsurprising.
