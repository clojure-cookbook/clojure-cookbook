[[sec_primitives_strings_seq_of_chars]]
==== Treating a String as a Sequence of Characters

===== Problem

You need to work with the individual characters in a string.

===== Solution

Use +seq+ on a string to expose the sequence of characters representing it.

[source,clojure]
----
(seq "Hello, world!")
;; -> (\H \e \l \l \o \, \space \w \o \r \l \d \!)
----

You don't need to call +seq+ every time you want to get at a strings
characters, though. Any function taking a function will naturally
coerce a string into a sequence of characters.

[source,clojure]
----
;; Count the occurrence of each character in a string.
(frequencies (clojure.string/lower-case "An adault all about A's"))
;; -> {\space 4, \a 6, \b 1, \d 1, \' 1, \l 3, \n 1, \o 1, \s 1, \t 2, \u 2}

;; Is every letter in a string capitalized?
(defn yelling? [s]
  (every? #(or (not (Character/isLetter %))
               (Character/isUpperCase %))
        s))

(yelling? "LOUD NOISES!")
;; -> true

(yelling? "Take a DEEP breath.")
;; -> false
----


===== Discussion

In Computer Science "string" literally means "sequence of characters"
and Clojure treats strings exactly as such. Because Clojure strings
are sequences under the covers, you may substitute a string anywhere a
collection is expected. When you do so, the string will be interpreted
as a collection of characters. There's nothing special about +(seq
string)+, the +seq+ function is merely returning a seq of the
collection of characters that the string is.

More often than not, after you've done some work on the characters
within a string you'll want to transform that collection back into a
string. Use +apply+ with +str+ on a collection of characters to
collapse them into a string.

[source,clojure]
----
(apply str [\H \e \l \l \o \, \space \w \o \r \l \d \!])
;; -> "Hello, world!"
----

===== See Also

* Concatenation strings sections
