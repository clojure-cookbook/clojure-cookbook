Almost every programming language knows how to work with and deal in
strings. Clojure is one of those languages, and despite a few
differences, is just as capable as languages like Ruby or Perl are at
working with strings. Here are a few key differences we think you should know about:

First, Clojure strings are backed by Java's hardened UTF-16 strings.
You don't need to add comments to files to indicate string encoding or
worry about losing characters in translation. Your Clojure programs
are ready to communicate in the world beyond a-Z.

Second, unlike languages like Perl or Ruby which have extensive string
libraries, Clojure has a rather spartan string library. This may seem
odd at first, but Clojure prefers simple and composable tools; any of
the plethora of collection modifying functions in Clojure are all
perfectly capable of accepting strings - they're collections too! For
this reason Clojure's string library is unexpectedly small. You'll
find that small set of very string-specific functions in the
+clojure.string+ namespace.

We suggest you "require as" the +clojure.string+ namespace when you
need it. Blindly ++:use++ing a namespace is always annoying, and often
results in collisions/confusion. Prefixing everything with
+clojure.string+ is also right-out.

[source,clojure]
----
(require '[clojure.string :as str])

(str/blank? "")
;; -> true
----

Let's get right to it.
