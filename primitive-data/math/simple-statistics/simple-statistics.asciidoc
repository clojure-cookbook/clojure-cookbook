==== Statistics on Collections of Numbers

===== Problem

You need to calculate simple statistics like mean, median, mode and standard
deviation on a collection of numbers.

===== Solution

Find the _mean_ (average) of a collection by dividing its total by the +count+ of the collection.

[source,clojure]
----
(defn mean [coll]
  (let [sum (apply + coll)
        count (count coll)]
    (if (pos? count)
      (/ sum count)
      0)))

(mean [1 2 3 4])
;; -> 5/2

(mean [1 1.6 7.4 10])
;; -> 5.0

(mean [])
;; -> 0
----

Find the _median_ (middle value) of a collection by +sort+ing its
values and +get+ing its middle value. There are, of course, special
considerations for collections of odd-length. In these cases median is
considering the mean of the *two* middle values.

[source,clojure]
----
(defn median [coll]
  (let [sorted (sort coll)
        count (count sorted)
        halfway (int (/ count 2))]
    (if (odd? count)
      (nth sorted halfway) <1>
      (let [bottom (dec halfway)
            bottom-val (nth sorted other)
            top-val (nth sorted halfway)]
        (mean [bottom-val top-val]))))) <2>

(median [5 2 4 1 3])
;; -> 3

(median [7 0 2 3])
;; -> 5/2  ; The average of 2 and 3.
----

* <1> In the case +coll+ has an odd number of items, simply retrieve that item with +nth+.
* <2> When +coll+ has an even number of items, find the index for the other central value (+bottom+), and take the mean of the top and bottom value.

Find the _mode_ (most frequently occurring value) of a collection by
using +frequencies+ to tally occurrences, then massage that tally to
retrieve the discrete list of modes.

[source,clojure]
----
(defn mode [coll]
  (let [freqs (frequencies coll) <1>
        occurrences (group-by second freqs) <2>
        modes (last (sort occurrences)) <3>
        modes (->> modes <4>
                   second
                   (map first))]
     modes))

(mode [:alan :bob :alan :greg])
;; -> (:alan)

(mode [:smith :carpenter :doe :smith :doe])
;; -> (:smith :doe)
----

////
Standard deviation:
Author: Jean Niklas L'orange. Github: hyPiRion
////

Find the sample _standard deviation_ by

* For each value in the collection, subtract the +mean+ from the value and multiply that result by itself.
* Then, sum up all those values.
* Divide the result by the number of values *minus one*.
* Finally, take the square root of the previous result.

[source,clojure]
----
(defn standard-deviation [coll]
  (let [avg (mean coll) <5>
        squares (for [x coll] ;<6>
                  (let [x-avg (- x avg)]
                    (* x-avg x-avg)))
        total (count coll)]
    (-> (/ (apply + squares) <7>
           (- total 1)) <8>
        (Math/sqrt)))) <9>

(standard-deviation [4 5 2 9 5 7 4 5 4])
;; -> 2.0

(standard-deviation [4 5 5 4 4 2 2 6])
;; -> 1.4142135623730951
----

===== Discussion

Both +mean+ and +median+ are fairly easy to reproduce in Clojure, but
+mode+ requires a bit more effort. +mode+ is a little different than
+mean+ or +median+ in that it generally only makes sense for
non-numeric data. Calculating the modes of a collection is a little
more involved, and ultimately requires a good deal of processing
compared to its numeric cousins.

Here is a break down of how +mode+ works:

* <1> +frequencies+ returns a map that tallies the number of times
each value in +coll+ occurs. This would be something like +{:a 1 :b 2}+
* <2> +group-by+ with +second+ inverts the +freqs+ map, turning keys into values, merging duplicates into groups. This would turn +{:a 1 :b 1}+ into +{1 [[:a 1] [:b 1]]}+.
* <3> The list of occurrences is now sortable; the last pair in the sorted list will be the modes, or most frequently occurring values.
* <4> The final step is processing the raw mode pairs into discrete values. Taking +second+ turns +[2 [[:alan 2]]]+ into +[[:alan 2]]+, and +(map first)+ turns that into '(:alan).

+standard-deviation+ is a bit more mathematical than mean, median and mode. To
get a better understanding on how it works, we can go through the first example
step by step:

* <5> the +mean+ of +[4 5 2 9 5 7 4 5 4]+ is +5+, we reuse the previously
defined +mean+ function.
* <6> we calculate a new list of values, where we subtract +5+ from every value
and multiply that result with itself. The result is the list +(1 0 9 16 0 4 1 0 1)+.
* <7> the sum of this new list is +32+, and we divide this by +9 - 1+, the
number of elements minus one. The result of +32/8+ is +4+.
* <9> finally, we take the square root of +4+ and get back +2.0+.

<8> We have here covered the the _sample_ standard deviation, where we have a random
sample of a larger population. If we have the complete population (_population_
standard deviation), we should divide by +total+ instead of +(- total 1)+.
