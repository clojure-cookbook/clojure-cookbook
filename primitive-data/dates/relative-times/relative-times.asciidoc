[[sec_primitives_dates_relative]]
=== Retrieving Dates Relative to One Another
[role="byline"]
by Ryan Neufeld

==== Problem

You need to calculate a time relative to some other time a la
http://rubyonrails.org/[Ruby on Rails]' +2.days.from_now+.

==== Solution

Because relative time is such a complex beast, we suggest using
https://github.com/clj-time/clj-time[+clj-time+] for calculating
relative dates and times.

Before starting, add `[clj-time "0.6.0"]` to your project's
dependencies or start a REPL using +lein-try+:

[source,shell]
----
$ lein try clj-time
----

If you've used the Ruby on Rails framework then you're likely
accustomed to statements like +1.day.from_now+, +3.days.ago+ or
+some_date - 2.years+. You'll be pleased to know that +clj-time+ exposes
similar functionality.

[source,clojure]
----
(require '[clj-time.core :as t])

;; 1.day.from_now (it's April 6 at the time of this writing)
(-> 1
    t/days
    t/from-now)
;; -> #<DateTime 2013-04-07T20:36:52.012Z>

;; 3.days.ago
(-> 3
    t/days
    t/ago)
;; -> #<DateTime 2013-04-03T20:37:06.844Z>
----

The +clj-time.core+ functions +from-now+ and +ago+ are just syntactic sugar
over +plus+ and +minus+.

[source,clojure]
----
;; 1.day.from_now    
(t/plus (t/now) (t/years 1))
;; -> #<DateTime 2014-04-06T20:41:43.638Z>

;; some_date - 2.years
(def some-date (t/date-time 2053 12 25))
(t/minus some-date (t/years 2))
;; -> #<DateTime 2051-12-25T00:00:00.000Z>
----

==== Discussion

Despite how difficult dates and times can sometimes be in Java,
+clj-time+ manages to expose a joyful syntax for adding and
subtracting from dates.

The functions +plus+, +minus+, +from-now+ and +ago+ all take a period
of time and adjust a +DateTime+ by that amount (be that time "now," as
in +from-now+ or +ago+, or some provided time.) +clj-time.core+
includes a number of useful period helpers ranging from +millis+ to
+years+ that produce a time period at a given scale.

Depending on your use case, it's even possible to arrange operation,
time period and time in such a manner that they almost read like a
sentence. Take +(-> 1 t/years t/from-now)+ for example. In this case
the threading macro +->+ threads each value as an argument to the next
producing +(t/from-now (t/years 1))+. It's up to you to arrange your
function calls as you see fit, but know that it is quite possible to
produce readable deep nested-calls like this.

==== See Also

* <<sec_primitives_dates_comparing>>

* <<sec_primitives_dates_ranges>>
