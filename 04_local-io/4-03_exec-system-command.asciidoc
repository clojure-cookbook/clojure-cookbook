=== Executing System Commands
[role="byline"]
by Mark Whelan and Ryan Neufeld

==== Problem

You want to send a command to the underlying operating system and get
its output.((("I/O (input/output) streams", "executing system commands")))(((shell commands)))

==== Solution

Use the +clj-commons-exec+ library to run shell commands on your local
system.((("clj-commons-exec library")))

To follow along, start a REPL using +lein-try+:

[source,text]
----
$ lein try org.clojars.hozumi/clj-commons-exec "1.0.6"
----

Invoking the +clj-commons-exec/exec+ function with a command will
return a promise, eventually delivering a map of the command's output,
exit status, and any errors that occurred (available via the +:out+, +:exit+,
and +:err+ keys, respectively):

[source,clojure]
----
(require '[clj-commons-exec :as exec])

(def p (exec/sh ["date"]))

(deref p)
;; -> {:exit 0, :out "Sun Dec  1 19:43:49 EST 2013\n", :err nil}
----

If your command requires options or arguments, simply append them to
the command vector as strings:

[source,clojure]
----
@(exec/sh ["ls" "-l" "/etc/passwd"])
;; -> {:exit 0
;;     :out "-rw-r--r--  1 root  wheel  4962 May 27 07:54 /etc/passwd\n"
;;     :err nil}

@(exec/sh ["ls" "-l" "nosuchfile"])
;; -> {:exit 1
;;     :out nil
;;     :err "ls: nosuchfile: No such file or directory\n"
;;     :exception #<ExecuteException ... Process exited with an error: 1 ...)>}
----

==== Discussion

Up until this point, we've neglected to mention that functionality
equivalent to +exec/sh+ already exists in Clojure proper (as
+clojure.java.shell/sh+). Now that the cat is out of the bag, it must
be asked: why use a library over a built-in? Simple: +clj-commons-exec+
is a functional veneer over the excellent
http://bit.ly/commons-exec[Apache Commons Exec]
library, providing capabilities like _piping_ not available in
+clojure.java.shell+.((("Clojure", "clojure.java.shell/sh")))(((Apache Commons Exec library)))

To pipe data through multiple commands, use the
+clj-commons-exec/sh-pipe+ function. Just as with regular Unix pipes,
pairs of commands will have their +STDOUT+ and +STDIN+ streams bound to
each other. The API of +sh-pipe+ is nearly identically to that of +sh+, the
only notable exception being that you will pass more than one command to
+sh-pipe+. The return value of +sh-pipe+ is a list of promises that
fulfill as each subcommand completes execution:

[source,clojure]
----
(def results (exec/sh-pipe ["cat"] ["wc" "-w"] {:in "Hello, world!"}))

results
;; -> (#<core$promise$reify__6310@71eed8d: {:exit 0, :out nil, :err nil}>
;;     #<core$promise$reify__6310@7f7dc7a1: {:exit 0,
;;                                           :out "       2\n",
;;                                           :err nil}>)

@(last results)
;; -> {:exit 0, :out "       2\n", :err nil}
----

Like any reasonable shell-process library, +clj-commons-exec+ allows you
to configure the environment in which your commands execute. To
control the execution environment of either +sh+ or +sh-pipe+, specify
options in a map as the final argument to either function. The +:dir+
option controls the path on which a command executes:

[source,clojure]
----
(println (:out @(exec/sh ["ls"] {:dir "/"})))
;; *out*
Applications
Library
# ...
usr
var
----

The +:env+ and +:add-env+ options control the environment variables
available to the executing command. +:add-env+ appends variables to the
existing set of environment variables, while +:env+ replaces the
existing set with a completely new one. Each option is a map of
variable names to values, like +{"USER" "jeff"}+:

[source,clojure]
----
@(exec/sh ["printenv" "HOME"])
;; -> {:exit 0, :out "/Users/ryan\n", :err nil}

@(exec/sh ["printenv" "HOME"] {:env {}})
;; -> {:exit 1, :out nil, :err nil, :exception #<ExecuteException ..)>}

@(exec/sh ["printenv" "HOME"] {:env {"HOME" "/Users/jeff"}})
;; -> {:exit 0, :out "/Users/jeff\n", :err nil}
----

There are a number of other options available in +sh+ and +sh-pipe+:

+:watchdog+::
  The time in number of seconds to wait for a command to finish executing before terminating it
+:shutdown+::
  A flag indicating that subprocesses should be destroyed when the VM exits
+:as-success+ and +:as-successes+::
  An integer or sequence of integers that will be considered successful exit codes, respectively
+:result-handler-fn+::
  A custom function to be used to handle results

[WARNING]
====
If you initiate long-running subprocesses inside of a +-main+
function, your application will hang until those processes complete.
If this isn't desirable, forcibly terminate your application by invoking
+(System/exit)+ directly at the end of your +-main+ function.
Additionally, set the option +:shutdown+ to +true+ for any
subprocesses to ensure you leave your system tidy and free of rogue
processes.(((applications, forcible termination of)))
====

To check if a subprocess has returned without waiting for it to
finish, invoke the +realized?+ function on the promise returned by
+sh+ (this is especially useful for monitoring the progress of the
sequence of promises returned by +sh-pipe+):(((functions, realized?)))

[source,clojure]
----
;; Any old long-running command
(def p (exec/sh ["sleep" "5"]))

(realized? p)
;; -> false

;; A few seconds later...
(realized? p)
;; -> true
----

==== See Also

* If you don't need piping or +clj-common-execs+ advanced features,
  consider using
  http://bit.ly/clj-java-shell-api[+clojure.java.shell+]
