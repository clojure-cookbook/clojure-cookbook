=== Reading a Single Keystroke from the Console
[role="byline"]
by John Jacobsen

==== Problem

Console input via +stdin+ is normally buffered by lines; you want to read a
single, unbuffered keystroke from the console.((("I/O (input/output) streams", "reading unbuffered keystrokes")))
(((functions, stdin)))(((functions, flush)))

==== Solution

Use +ConsoleReader+ from the https://github.com/jline/jline2[JLine library], a Java library for handling console input.(((ConsoleReader)))(((JLine library)))(((BSD editline)))(((GNU readline)))

JLine is similar to BSD editline and GNU readline. To follow along with this
recipe, create a new library using the command *+lein new keystroke+*.  Inside
_project.clj_, add `[jline "2.11"]` to the +:dependencies+ vector.

Inside the _src/keystroke/core.clj_ file, use +ConsoleReader+ to read characters from the terminal:

[source,clojure]
----
(ns keystroke.core
  (:import [jline.console ConsoleReader]))

(defn show-keystroke []
  (print "Enter a keystroke: ")
  (flush)
  (let [cr (ConsoleReader.)
        keyint (.readCharacter cr)]
    (println (format "Got %d ('%c')!" keyint (char keyint)))))
----

==== Discussion

As in most languages, console I/O in Java is buffered; +flush+
writes the initial prompt to the standard output stream. However,
input is buffered as well by default. The JLine library provides a
+ConsoleReader+ object whose +readCharacter+ method lets you avoid the
input buffering. Beware, however, of testing +show-keystroke+ at the REPL:

[source,text]
----
$ lein repl
user=> (require '[keystroke.core :refer [show-keystroke]])
user=> (show-keystroke)
Enter a keystroke:
;; HANGS!
----

In order to connect the console's input correctly to the REPL, use(((lein trampoline repl)))
*+lein trampoline repl+* (the +<r>+ here means the user types the letter +r+):

[source,text]
----
$ lein trampoline repl
user=> (require '[keystroke.core :refer [show-keystroke]])
user=> (show-keystroke)
Enter a keystroke: <r>Got 114 ('r')!
nil
user=> 

----

+lein trampoline+ is necessary because, by default, a Leiningen REPL(((Leiningen plugins, trampolining control with)))
actually runs the REPL and its associated console I/O in a separate
JVM process from your application code. Using the +trampoline+ option
forces Leiningen to run your code in the same process as the REPL,
"trampolining" control back and forth. Normally this is invisible,
but it is a problem when running code that itself is attempting to use
the console directly.(((trampolining)))

When running your program outside the REPL (as you typically would be,
with a command-line application written in Clojure), this is not an
issue.

==== See Also

* If you want a richer terminal-based interface similar to what
  the C _curses_ library provides, the
  http://bit.ly/clj-lanterna[+clojure-lanterna+] library
  may be a good place to start.
