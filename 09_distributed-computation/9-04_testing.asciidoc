=== Testing Cascalog Workflows
[role="byline"]
by Alex Robbins

==== Problem

You love testing your code. You love writing Cascalog jobs. You hate
trying to test your Cascalog jobs.(((Cascalog, testing workflows)))(((testing, Cascalog workflows)))((("unit testing", see="testing")))

==== Solution

http://bit.ly/midje-cascalog[Midje-Cascalog] provides a small amount of extra functionality that
makes writing tests for Cascalog jobs quite easy.(((Midje))) To follow along with this recipe, clone the
http://bit.ly/cc-cascalog-samples[Cascalog samples
GitHub repository] and check out the +testing-begin+ branch. This will
give you a basic Cascalog project as created in <<sec_cascalog_etl>>.

Now add the Midje plug-in and Midje-Cascalog dependency to the +:dev+
profile in your _project.clj_. The +:profiles+ key should now look
like this:

[source,clojure]
----
(defproject cookbook "0.1.0-SNAPSHOT"
  ;; ...
  :profiles {:dev {:dependencies [[org.apache.hadoop/hadoop-core "1.1.2"]
                                  [cascalog/midje-cascalog "2.0.0"]]
                   :plugins [[lein-midje "3.1.1"]]}})
----

Create a simple query in _src/cookbook/test_me.clj_ to write a test
against:

[source,clojure]
----
(ns cookbook.test-me
  (:require [cascalog.api :refer :all]))

(defn capitalize [s]
  (.toUpperCase s))

(defn capitalize-authors-query [author-path]
  (<- [?capitalized-author]
    ((hfs-textline author-path) ?author)
    (capitalize ?author :> ?capitalized-author)))
----

You can now write a test for this query in
_test/cookbook/test_me_test.clj_:

[source,clojure]
----
(ns cookbook.test-me-test
  (:require [cookbook.midje-cascalog :refer :all]
            [midje
              [sweet :refer :all]
              [cascalog :refer :all]]))

(fact "Query should return capitalized versions of the input names."
  (capitalize-authors-query :author-path) => (produces [["LUKE VANDERHART"]
                                                        ["RYAN NEUFELD"]])
  (provided
    (hfs-textline :author-path) => [["Luke Vanderhart"]
                                    ["Ryan Neufeld"]]))
----

[NOTE]
====
The full contents of this solution are available in the
+testing-complete+ branch of the
http://bit.ly/cc-cascalog-samples[Cascalog samples
repository].

Check out that branch to retrieve a full working copy with sample data:

[source,text]
----
$ git checkout testing-complete
----
====

Finally, run the tests with *+lein midje+*:

[source,text]
----
$ lein midje
2013-11-09 12:19:27.844 java[3620:1703] Unable to load realm info from
  SCDynamicStore
All checks (1) succeeded.
----

==== Discussion

Unit testing is an important aspect of software craftsmanship.
However, unit testing Hadoop workflows is difficult, to say the least.
Most distributed computing development is done using trial and error,
with only limited manual testing happening before the workflow is
considered "good enough" and put into production use. You shouldn't let your code
quality slip, but testing distributed code can be difficult.
Midje-Cascalog makes it easy to test different parts of your Cascalog
workflow by making it dead simple to mock out the results of
subqueries.(((Hadoop, unit testing in)))

In the solution outlined, you are testing a simple query. It
reads lines from the input path, capitalizes them, and outputs them.
Normally, you'd need to make sure part of the test wrote some test
data into a file, reference that file in the test, then clean up
and delete the file. Instead, using Midje-Cascalog, you mock the
+hfs-textline+ call.

+fact+ is provided by the Midje library, which is well worth
learning on its own. It is an alternative to +deftest+ from
+clojure.test+. Here, you state the test as a call, followed by an arrow and then
the +produces+ function. +produces+ lets you write out the results of
a query as a vector of vectors. Having established the test, you use
+provided+ to outline the functions you want to mock. This lets you
test only the function in question, and not the functions it depends
on. Testing your Cascalog workflows is as important as testing any other
part of your application. With Midje-Cascalog, this is actually
possible.

==== See Also

* <<sec_midje>>
* The http://bit.ly/midje-cascalog[Midje-Cascalog documentation] on GitHub
