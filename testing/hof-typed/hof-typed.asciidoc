=== Type Checking Higher-order functions with core.typed

=== Problem

Clojure strongly encourages higher-order functions, but tools for
verifying their use focus on runtime verification. We want earlier
feedback: compile time.

=== Solution

We use core.typed to type check higher-order function use.

We use `clojure.core.typed/cf` to type check individual forms.
We can lookup the type for some common higher-order functions
this way, also using `clojure.repl/doc` to read their documentation.

[source,clojure]
-----
clojure.core.typed> (cf iterate)
(All [x] 
  (Fn [(Fn [x -> x]) x -> (clojure.lang.LazySeq x)]))

clojure.core.typed> (require '[clojure.repl :refer [doc]])
clojure.core.typed> (doc iterate)
clojure.core/iterate
([f x])
  Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
-----

These two tools are complementary in exploring Clojure's core library.

Let's define our own higher-order function `hash-of?`, which takes two predicates
and returns a predicate.

[source,clojure]
----
(ns book.hof
  (:require [clojure.core.typed :refer [ann fn>] :as t]))

(ann hash-of? [[Any -> Any] [Any -> Any] -> [Any -> Any]])
(defn hash-of? [ks? vs?]
  (fn> [m :- Any]
    (when (map? m)
      (and (every? ks? (keys m))
           (every? ks? (vals m))))))
----

http://clojure.github.io/core.typed/#clojure.core.typed/fn>[clojure.core.typed/fn>] 
is used like `fn` except each argument must be annotated.

Each argument to `hash-of?` has type `[Any -> Any]`: a single argument function taking
anything and returning anything. 

core.typed can verify the implementation and usages of `hash-of?`.

[source,clojure]
-----
book.hof> (t/check-ns)
:ok
-----

Invoking `hash-c?` with two predicates is verified by core.typed as expected.

[source,clojure]
-----
book.hof> (t/cf (hash-of? number? number?))
(Fn [Any -> Any])
-----

Passing `+` as a predicate, however, is a type error.

[source,clojure]
-----
book.hof> (t/cf (hash-of? + number?))
Type Error (book.hof:1:36) Expected type: (Fn [Any -> Any])
Actual: (Fn [t/AnyInteger * -> t/AnyInteger] [Number * -> Number])
ExceptionInfo Type Checker: Found 1 error  clojure.core/ex-info (core.clj:4327)
-----

This is because `hash-of?` takes a function with an `Any` parameter, while `+` can take
at most a `Number`.

core.typed also tells us when we are passing the wrong number of arguments to
a function returned by another function.

[source,clojure]
-----
book.hof> (t/cf (fn [] ((hash-of? + number?))))
Type Error (book.hof:1:43) Wrong number of arguments, expected 1 fixed parameters, and got 0 for function [Any -> Any] and arguments []
in: ((book.hof/hash-of? clojure.core/number? clojure.core/number?))


ExceptionInfo Type Checker: Found 1 error  clojure.core/ex-info (core.clj:4327)
-----

Note we wrap the faulty `((hash-of? + number?))` in a `fn` because 
as of writing core.typed evalutates code before it type checks it.
Otherwise `((hash-of? + number?))` returns the usual Clojure runtime error
for mismatched parameters:

[source,clojure]
----
book.hof> (t/cf ((hash-of? + number?)))
ArityException Wrong number of args (0) passed to: hof$hash-of-QMARK-$fn  clojure.lang.AFn.throwArity (AFn.java:437)
----

=== Discussion

Another way to verify higher-order functions is by runtime assertions. Clojure's
pre/post conditions are useful for defining anonymous functions that fail fast
when passed incorrect parameters. The upside of runtime assertions is there is
no commitment to a programming style like static typing, but the downside is
feedback is at runtime.

The `All` around `iterate`'s type indicates that it is _polymorphic_ in `x`.
It reads, "for all types x, takes a function that accepts an x and returns an x,
and takes an x, and returns a lazy sequence of x". Read more about 
https://github.com/clojure/core.typed/wiki/User-Guide#polymorphism[polymorphism] in core.typed.

=== See also

https://github.com/clojure/core.typed[core.typed Home]
