== Verify Java interop with core.typed

=== Problem

Java provides a vast ecosystem that is a major draw for Clojure developers,
however it can be often be complex to use large, cumbersome Java APIs from
Clojure.
We want to verify that we are using Java libraries safely and unambiguously.

=== Solution

We use core.typed to type check our Java interop calls.

To demonstrate, let's pick a standard Java API: 
http://docs.oracle.com/javase/6/docs/api/java/io/File.html(java.io.File).

Using the dot constructor for creating new Files is a bit annoying, so let's
wrap it in a Clojure function that takes a string: `new-file`.

[source,clojure]
---
(ns book.java-interop1
  (:require [clojure.core.typed :refer [ann] :as t])
  (:import (java.io File)))

(ann new-file [String -> File])
(defn new-file [s]
  (File. s))
---

Setting `*warn-on-reflection*` when compiling this namespace will tell us that we
have a reflection call to the `java.io.File` constructor. core.typed will tell
us the same information, except in the form of a type error.

[source,clojure]
---
book.java-interop1> (t/check-ns)
ExceptionInfo Internal Error (book.java-interop1:6) Unresolved constructor invocation java.io.File.

Hint: add type hints.

in: (new java.io.File s)  clojure.core/ex-info (core.clj:4327)
---

Let's add a type hint to call the `public File(String pathname)` constructor 
(http://docs.oracle.com/javase/6/docs/api/java/io/File.html#File(java.lang.String)[Javadoc]).

[source,clojure]
----
(ns book.java-interop2
  (:require [clojure.core.typed :refer [ann] :as t])
  (:import (java.io File)))

(ann new-file [String -> File])
(defn new-file [^String s]
  (File. s))
----

This satisfies core.typed.

[source,clojure]
---
book.java-interop1> (t/check-ns)
:ok
---

File has a second single-argument constructor: `public File(URI uri)`.
Let's enhance `new-file` to support URI's or String's.

[source,clojure]
----
(ns book.java-interop3
  (:require [clojure.core.typed :refer [ann] :as t])
  (:import (java.io File)
           (java.net URI)))

(ann new-file [(U URI String) -> File])
(defn new-file [s]
  (if (string? s)
    (File. ^String s)
    (File. ^URI s)))
----

We have two separate calls to a single arity `File` constructor, using the predicate
`string?` to decide between them. We relax our core.typed input type to `(U URI String)`,
and core.typed can infer that each branch has the correct types by following the `string?` predicate.

Let's wrap a method from java.io.File. `parent` is a thin wrapper over the File instace method `getParent`.

[source,clojure]
----
(ns book.java-interop4
  (:require [clojure.core.typed :refer [ann] :as t])
  (:import (java.io File)))

(ann file-parent [File -> String])
(defn file-parent [^File f]
  (.getParent f))
----

There are no reflective calls here, so what does core.typed think?

[source,clojure]
---
book.java-interop4> (t/check-ns)
Type Error (book.java-interop4:7:3) Return type of instance method java.io.File/getParent is (U java.lang.String nil), expected java.lang.Stri
ng.

Hint: Use `non-nil-return` and `nilable-param` to configure where `nil` is allowed in a Java method call. `method-type` prints the current typ
e of a method.
in: (.getParent f)


Type Error (book.java-interop4:6) Expected type: String
Actual: (U String nil)
in: (.getParent f)


Type Error (book.java-interop4:6:1) Expected type: (Fn [File -> String])
Actual: (Fn [File -> (U String nil)])
in: (def file-parent (fn* ([f] (.getParent f))))


ExceptionInfo Type Checker: Found 3 errors  clojure.core/ex-info (core.clj:4327)
----

core.typed assumes all methods return nullable types, so it is a type error to annotate
`parent` as `[File -> String]`. Each type error above reiterates that we tried to claim
a `(U nil String)` was a `String`, with the most specific (and useful) error being the first.

The twist here is core.typed was right in its pessimism: `getParent` _does_ return null when
the File does not have a parent. We confirm this from the 
http://docs.oracle.com/javase/6/docs/api/java/io/File.html#getParent()[Javadoc].

If core.typed is too pessimistic with nilable return types, we can override particular methods with
`clojure.core.typed/non-nil-return`.

[source,clojure]
---
(ns book.java-interop5
  (:require [clojure.core.typed :refer [ann] :as t])
  (:import (java.io File)))

(t/non-nil-return java.io.File/getName :all)

(ann file-name [File -> String])
(defn file-name [^File f]
  (.getName f))
---

This type checks successfully.

Note that as of writing, core.typed does not enforce static type overrides
at runtime, so use `non-nil-return` and similar features with caution.

=== Discussion

While `java.io.File` is a relatively small API, we can see even from this
small example that Java interop is fraught with danger. 
Careful inspection of Java types _and_ documentation
is needed to confidently use foreign Java code correctly.

core.typed is designed to be pessimistic about Java code, while being
accurate enough to avoid adding arbitrary code to "please" the type checker.
For example, core.typed distrusts Java methods enough to assume all method
parameters are non-nullable and the return type is nullable by default.
On the other hand, core.typed knows Java constructors never return `null`.

Sometimes the type checker might seem overly picky; take the namespace
`book.java-interop3`, where
we type hint 2 constructors. It might seem normal in a dynamically typed language
to simply call `(File. s)` and allow reflection to resolve any ambiguity.
By conforming to what core.typed expects, however, we have eliminated any ambiguity
in our constructors, and the type hints we have inserted have enabled the Clojure
compiler to generate efficient bytecode.

It is valid to wonder why both type hints _and_ core.typed annotations are needed
to type check ambiguous Java calls. A type hint is a directive to the _compiler_,
while type annotations are merely for core.typed to consume during type checking.
core.typed does not have influence over resolving reflection calls at compile 
time, so it chooses to assume all reflection calls to be ambiguous instead of trying
to guess what the reflection might resolve to at runtime.
This simple rule usually results in faster, more explicit code, often desirable in
larger code bases.

=== See also

http://clojure.github.io/core.typed/#clojure.core.typed/non-nil-return[non-nil-return]
http://clojure.github.io/core.typed/#clojure.core.typed/nilable-param[nilable-param]
http://clojure.github.io/core.typed/#clojure.core.typed/override-method[override-method]
http://clojure.github.io/core.typed/#clojure.core.typed/override-constructor[override-constructor]
http://clojure.github.io/core.typed/#clojure.core.typed/method-type[method-type]
